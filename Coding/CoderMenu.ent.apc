{Application 'CODERMENU' logic file generated by CSPro}
PROC GLOBAL
{
TODO: Set data file as a central data file Look into programmatically changing the data file based on round and year
}
//--------------------------------Variable Declaration---------------------------------------
string	ftpip,			//Stores ftp address
		ftpun,			//stores ftp username
		ftppw,			//stores ftp password
		username,		//stores user name
		status,			//stores current login status
		;
		
numeric	errflag,		//sets error flag
		roundnumber,	//saves round number
		;

file	loginfile,		//saves login status in a file	
		pffFile,		//Creates a .pff file
		;
		
//-------------------------------Array Declaration------------------------------------------
array string	vsCode(99);		//valueset codes
array string 	vsLabel(99);	//valueset labels
		
//-----------------------------Function declaration-----------------------------------------
//Launches a questionnaire for coding
function launchQuestionnaire()
	string pffFilename = Pathname(application) + "DataEntry.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.1");
	filewrite(pffFile,"AppType=Entry");

	filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"OperatorID=%s",UNAME);
	filewrite(pffFile,"StartMode=Modify;%s",CHOOSE_QUESTIONNAIRE);
	filewrite(pffFile,"Lock=Add,Verify,Stats");
	filewrite(pffFile,"FullScreen=Yes");
	filewrite(pffFile,"AutoAdd=No");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%s","./DataEntry.ent");
	filewrite(pffFile,"InputData=%s","../Data/data.csdb|CSPRODB");

	filewrite(pffFile,"[ExternalFiles]");
	filewrite(pffFile,"AUXIL_DICT=%s","../Data/auxil.csdb|CSPRODB");
	filewrite(pffFile,"INDUSTRY_CODES_DICT=%s","../Data/IndustryCodes.csdb|CSPRODB");
	filewrite(pffFile,"OCCUPATION_CODES_DICT=%s","../Data/Occupationcodes.csdb|CSPRODB");
	
	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"CODER=%s",maketext("%v",visualvalue(USERID)));
	filewrite(pffFile,"UNAME=%s",UNAME);

	close(pffFile);

	execpff(filename(pffFile));
end;

//downloads Data based on ED
function downloadData()
	errflag = 0;
	errmsg("Attempting to download all data from Round :%d, ED :%d",CHOOSE_ROUND,CO_ED);
	//errmsg("Data dictionary value Round :%V, ED :%V", RNDNO,EDNO);
	if syncconnect(FTP,ftpip,ftpun,ftppw) then		//connect to FTP when outside of the government WAN
		if not syncdata(GET,LABOURFORCE_DICT,maketext("%2d%v",CHOOSE_ROUND,CO_ED)) then		//get labourforce data for round and ED
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	if errflag > 1 then
		errmsg("Download of round %d, ED %d failed, Please try again. %d errors were found",CHOOSE_ROUND,CO_ED,errflag);
	elseif errflag = 0 then
		errmsg("Download of round %d, ED %d was successful",CHOOSE_ROUND,CO_ED);
	elseif errflag = 1 then
		errmsg("Download of round %d, ED %d failed, Please try again",CHOOSE_ROUND,CO_ED);
	endif;
end;

//uploads data to server
function saveWork()
	if not roundnumber in 1:4 then
		roundnumber = 0;
		do until roundnumber in 1:4
			roundnumber = accept("Choose current round","One","Two","Three","Four");
		enddo;
	endif;
	errflag = 0;
	//errmsg("Attempting to download all data from Round :%d, ED :%d",CHOOSE_ROUND,CO_ED);
	//errmsg("Data dictionary value Round :%V, ED :%V", RNDNO,EDNO);
	if syncconnect(FTP,ftpip,ftpun,ftppw) then		//connect to FTP when outside of the government WAN
		if not syncdata(PUT,LABOURFORCE_DICT,maketext("%2d%v",roundnumber,CO_ED)) then		//upload labourforce data for round and ED
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	if errflag >= 1 then
		errmsg("Upload of round %d, ED %d failed, Please try again. %d errors were found",roundnumber,CO_ED,errflag);
	//elseif errflag = 0 then
	//	errmsg("Upload of round %d, ED %d was successful",roundnumber,CO_ED);	
	endif;
end;

//Writes the login status to a file
function writeloginstatus(x)
	string loginFilename = pathname(application)+"loginflag.dat";
	setfile(loginfile,loginFilename,create);

	filewrite(loginfile,"%d%03d%02d%s",x,visualvalue(CO_ED),USERID,strip(UNAME));	//write value of "x" to file. 1=logged in, 0=logged out
	setoperatorid(strip(UNAME));
	savesetting("UNAME",strip(UNAME));
	
	close(loginfile);
end;

//reads login status and returns 1 (logged in) or 0 (not logged in)
function readloginstatus()
	string loginfilename = pathname(application)+"loginflag.dat";	//set file path
	setfile(loginfile, loginfilename);		//set file handle
	fileread(loginfile, status);			//read file
	close(loginfile);						//close file
	
	readloginstatus = tonumber(status[1:1]);		//set function to file contents
	CO_ED = tonumber(status[2:3]);
	if tonumber(status[1:1]) = 1 then		//if logged in set login details
		USERID = tonumber(status[5:2]);
		UNAME = status[7];
		setoperatorid(status[7]);		//sets operator ID to username
		savesetting("UNAME",strip(UNAME));		//saves username as a setting so that other apps can access
	elseif tonumber(status[1:1]) = 0 then		//if logged out clear login details from form
		USERID = notappl;
		UNAME = "";
	endif;
end;

function OnStop();
	//SaveWork();
end;

PROC CODERMENU_FF

PROC CODERMENU_QUEST
preproc

	//Initialize ftp variables
	ftpip = "10.129.20.110";
	ftpun = "Census";
	ftppw = "Census2020ADM!N";
	
//-----------------------------------------------------------------------
PROC UNAME
preproc
	//if already logged in then just login, if not, continue logging in
	if readloginstatus() = 1 then
		advance to MAIN_MENU;
	endif;

//--------------------------------------------------------------------
PROC USERID
//code to make sure that the valueset label matches Username
postproc
	if getlabel(USERID_VS1,$) = strip(UNAME) then
		writeLoginStatus(1);//success
	else
		errmsg("Username and ID don't match! Please try again");
		move to UNAME;
	endif;


//---------------------------------------------------------------
PROC CO_ED
onfocus
	//displays saved ED  number

	$ = tonumber(loadsetting("ED")); 
	
postproc
	//saves the ED number as a setting
	savesetting("ED",maketext("%d",$));
	setoperatorid(UNAME);
	
	
//--------------------------------------------------------------------
PROC MAIN_MENU
onfocus
	$ = notappl;
	username = getlabel(UNAME_VS1,UNAME);
	
postproc
	if $ = 1 then
		skip to CHOOSE_ROUND;
	elseif $ = 2 then
		skip to CHOOSE_QUESTIONNAIRE;
	elseif $ = 3 then
		SaveWork();
	elseif $ = 9 then
		UNAME = "";
		USERID = notappl;
		writeloginstatus(0);
		stop(1);
	endif;
	reenter;
PROC CHOOSE_ROUND
postproc
	roundnumber = $;
	downloadData();
	move to MAIN_MENU;
PROC CHOOSE_QUESTIONNAIRE
onfocus
	numeric nextEntry = 1;
	numeric headindex;
	forcase LABOURFORCE_DICT where EDNO = CO_ED and VACANT = 2 do
		loadcase(LABOURFORCE_DICT,RNDNO,EDNO,PARNO,STRATUM,HHNO);
		if CODER = notappl then		//and was not coded
			headindex = seek(LRTH = 0);
			vscode(nextEntry) = maketext("%V%V%V%V%V",RNDNO,EDNO,PARNO,STRATUM,HHNO);
			vslabel(nextEntry) = maketext("%S-%02d-%03d-%03d-%d-%03d",strip(LLAST_NAME(headindex)),RNDNO,EDNO,PARNO,STRATUM,HHNO );
			inc(nextEntry);
		else						//was coded
			headindex = seek(LRTH = 0);
			vscode(nextEntry) = maketext("%V%V%V%V%V",RNDNO,EDNO,PARNO,STRATUM,HHNO);
			vslabel(nextEntry) = maketext("%S-%02d-%03d-%03d-%d-%03d: Coded (%v)",strip(LLAST_NAME(headindex)),RNDNO,EDNO,PARNO,STRATUM,HHNO, getlabel(CODER_VS1, CODER) );
			inc(nextEntry);
		endif;
	endfor;
	
	vscode(nextEntry) = "";
	setvalueset($,vsCode,vsLabel);
	
postproc
	launchQuestionnaire();
	move to MAIN_MENU;
	

//---------------------------------------------------------
