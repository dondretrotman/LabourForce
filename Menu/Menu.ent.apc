{Application 'MENU' logic file generated by CSPro}
{
Todo: Transfer plaintext usernames and passwords to configuration store
}

PROC GLOBAL
//--------------------------------Variable Declaration------------------------------------
file 	pffFile,		//Creates a .pff file
		loginfile;		//saves login status in a file
		
config	cswebip1,		//Stores CSWeb address
		cswebip2,		//Stores CSWeb secondary address
		ftpun, 			//stores ftp username
		ftppw;			//stores ftp password		

string 	rnd_ed,		//round and ED number to be downloaded
		status,		//stores current login status
		username,		//stores user name
//		ftpip1,		//Stores ftp address
//		ftpip2,		//stores ftp secondary address
//		cswebip1,	//Stores CSWeb address
//		cswebip2,	//Stores CSWeb secondary address
//		ftpun, 		//stores ftp username
//		ftppw,		//stores ftp password
		convid,		//stores control sheet id that was converted to a questionnaire id
		temparray,	//temporarily stores a string array value
		parish,		//parish
		idno,		//ID for loading a case
		uid,
		edstatus,	//stores completion status for display on the report Completed\Ongoing
		keyid,
		prevround,	//stores house ID for previous round
		curid,		//stores id for current case
		caselabel,	//stroes caselabel for current case
		newcaselabel,	//stores new case label for current case
		osname;		//stores name and version of OS
		

numeric deleteflag,		//stores flag for case deletion
		errflag,		//sets error flag
		version,		//version number
		lastupdate,		//last update version day
		updated,		//Last time the app was updated
		//rnd,			//stores round number
		rndmonth,		//Current month for calculating round number
		housecount,		//counts number of households
		indivcounttot,	//counts total number of individuals in an ED
		numerator,		//number of completed households (for calculating completed eds)
		denominator,	//number of households (for calculating completed eds)
		allocationdate,	//last allocation date
		tempround,		//calculates previous round
		nextEntry,		//Keeps track of valueset array
		headindex,		//person id of the head of household
		a,i,j,k,l,m,n;		//general counters and temp variables
		

//----------------------------------Array Declaration-------------------------------------
array string	vsCode(50);		//valueset codes
array string 	vsLabel(50);	//valueset labels
array string 	address(50,3);	//stores addresses
array numeric	vsEDCode(10);	//stores ED
//array string	vsEDLabel(10);	//Stores ED label
array string	REPORTARRAY(50,13);	//stores enumerator report data (50 = number of records, 13 = number of fields (ERFEILD_OFFICER, ERSERIAL_NO,ERUNIT_NO,ERHH_SIZE,ERMALES,ERFEMALES,WEEK_ENDING,ERLAST-NAME, ERFIRST_NAME, ERADDRESS, ERSTART, EREND,ERREMARKS))
array string	curcasearray(8);	//stores current case (VISITNO, ENMRTR, ROTATION, DATE, SUPERV, LENDDATE, LSTARTTIME, LENDTIME)

//--------------------------------Function declaration------------------------------------
//Launches the Control sheet
function LaunchControlSheet()
	//execpff("../ControlSheets/Listing.pff", stop);
	string pffFilename = Pathname(application) + "../ControlSheets/Listing.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.2");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description= ");

	filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"OperatorID=%v",UNAME);
	filewrite(pffFile,"StartMode=Add");
	//filewrite(pffFile,"ShowInApplicationListing=Hidden");
	if getos() = 20 then				//only include the following line if on an android tablet
		filewrite(pffFile,"Lock=CaseListing");
	endif;
	filewrite(pffFile,"AutoAdd=Yes");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%v","./Listing.ent");
	filewrite(pffFile,"InputData=%v","../Data/Controlsheet.csdb|CSPRODB");
	filewrite(pffFile,"Paradata=%v",maketext("../Data/Controlsheet%02d%03d.cslog",ME_ROUND,ME_ED));
	
	filewrite(pffFile,"[UserFiles]");
	filewrite(pffFile,"PFFFILE=%v","");
	
	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"OnExit=%v","../Menu/Menu.pff");
	filewrite(pffFile,"MODE=%v","DEFAULT");
	filewrite(pffFile,"LSTENUMCODE=%v",maketext("%v",visualvalue(USERID)));
	filewrite(pffFile,"LSTROUND=%v",maketext("%v",ME_ROUND));
	filewrite(pffFile,"LSTED=%v",maketext("%v",ME_ED));
		
	close(pffFile);
	
	execpff(filename(pffFile), stop);
end;

//launches control sheet for supervisers
function launchSupervisorControlSheet()

	string pffFilename = Pathname(application) + "../ControlSheets/Listing.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.2");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=  ");

	filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"OperatorID=%v",UNAME);
	filewrite(pffFile,"StartMode=Add;%v",CHOOSE_CONTROL_SHEET);
	//filewrite(pffFile,"ShowInApplicationListing=Hidden");
	filewrite(pffFile,"Lock=CaseListing");
	filewrite(pffFile,"AutoAdd=No");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%v","./Listing.ent");
	filewrite(pffFile,"InputData=%v","../Data/Controlsheet.csdb|CSPRODB");
		
	filewrite(pffFile,"[UserFiles]");
	filewrite(pffFile,"PFFFILE=%v","");
	
	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"OnExit=%v","../Menu/Menu.pff");
	filewrite(pffFile,"MODE=%v","EDIT");
	filewrite(pffFile,"LSTROUND=%v",CHOOSE_CONTROL_SHEET[1:2]);
	filewrite(pffFile,"LSTED=%v",CHOOSE_CONTROL_SHEET[3:3]);
	filewrite(pffFile,"LSTPARISH=%v",CHOOSE_CONTROL_SHEET[6:3]);
	filewrite(pffFile,"LSTSTRATUM=%v",CHOOSE_CONTROL_SHEET[9:1]);
	filewrite(pffFile,"LSTBUILDING=%v",CHOOSE_CONTROL_SHEET[10:3]);
	filewrite(pffFile,"LSTSAMPLE=%v",CHOOSE_CONTROL_SHEET[13:3]);
	
	close(pffFile);

	execpff(filename(pffFile), stop);
end;

//searches an array and returns the position (Originally written by Gregory Martin)
function searchArray(array string arrayName(,),string findValue) 

    numeric foundPos,itr;
    
    do itr = 1 while itr <= tblrow(arrayName) and not foundPos
        
        if arrayName(itr,1) = findValue then
            foundPos = itr;
        endif;
    
    enddo;
    
    searchArray = foundPos;

end;

//Launches the Questionnaire
function LaunchQuestionnaire()

	string pffFilename = Pathname(application) + "../Questionnaire/Labourforce.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile, "[Run Information]");
	filewrite(pffFile, "Version=CSPro 7.2");
	filewrite(pffFile, "AppType=Entry");
	filewrite(pffFile, "Description=   ");

	filewrite(pffFile, "[DataEntryInit]");
	filewrite(pffFile, "OperatorID=%v", UNAME);
	filewrite(pffFile, "StartMode=Add;%v", CHOOSE_HOUSEHOLD);
	filewrite(pffFile, "Lock=CaseListing");
	//filewrite(pffFile, "ShowInApplicationListing=Hidden");
	filewrite(pffFile, "AutoAdd=No");

	filewrite(pffFile, "[Files]");
	filewrite(pffFile, "Application=%v","./Labourforce.ent");
	filewrite(pffFile, "InputData=%v","../Data/data.csdb|CSPRODB");
	filewrite(pffFile, "Paradata=%v",maketext("../Data/Labourforce%02d%03d.cslog",ME_ROUND,ME_ED));
	
	filewrite(pffFile, "[ExternalFiles]");
	filewrite(pffFile, "LISTING_DICT=%v", "../Data/Controlsheet.csdb|CSPRODB");
	filewrite(pffFile, "ENUMERATIONREPORT_DICT=%v", "../Data/enumrpt.csdb|CSPRODB");
	
	filewrite(pffFile, "[UserFiles]");
	filewrite(pffFile, "PFFFILE=%v", "");

	filewrite(pffFile, "[Parameters]");
	filewrite(pffFile,"OnExit=%v","../Menu/Menu.pff");
	filewrite(pffFile, "RNDNO=%v",CHOOSE_HOUSEHOLD[1:2]);
	filewrite(pffFile, "EDNO=%v",CHOOSE_HOUSEHOLD[3:3]);
	filewrite(pffFile, "PARNO=%v",CHOOSE_HOUSEHOLD[6:3]);
	filewrite(pffFile, "STRATUM=%v",CHOOSE_HOUSEHOLD[9:1]);		//skip Building no (CHOOSE_HOUSEHOLD[10:3]) which is not included in Labourforce ID items
	filewrite(pffFile, "HHNO=%v",CHOOSE_HOUSEHOLD[10:3]);		
	filewrite(pffFile, "ENMRTR=%v",maketext("%v",visualvalue(USERID)));
	filewrite(pffFile, "ADDRESS=%v",address(searchArray(address,CHOOSE_HOUSEHOLD),2));
	filewrite(pffFile, "BLDGNO=%v",address(searchArray(address,CHOOSE_HOUSEHOLD),3));
	
	close(pffFile);

	execpff(filename(pffFile), stop);

end;

function allocateenum()
	// change the following filename to your desired output
	string pffFilename = pathname(Application) + "../Allocation/Allocation.pff";

	setfile(pffFile,pffFilename,create);

	filewrite(pffFile, "[Run Information]");
	filewrite(pffFile, "Version=CSPro 7.2");
	filewrite(pffFile, "AppType=Entry");
	filewrite(pffFile, "Description=    ");

	filewrite(pffFile, "[DataEntryInit]");
	filewrite(pffFile,"OperatorID=%s",UNAME);
	filewrite(pffFile,"StartMode=Add;%v",ALLOCATE_ENUMERATOR);
	//filewrite(pffFile, "ShowInApplicationListing=Hidden");
	filewrite(pffFile, "AutoAdd=No");
	filewrite(pffFile,"Lock=CaseListing");

	filewrite(pffFile, "[Files]");
	filewrite(pffFile, "Application=%v", "./Allocation.ent");
	filewrite(pffFile, "InputData=%v", "../Data/assignments.csdb|CSPRODB");
	
	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"OnExit=%v","../Menu/Menu.pff");
	filewrite(pffFile,"AUSER_ID=%v",ALLOCATE_ENUMERATOR);
	filewrite(pffFile,"AROUND=%v",ME_ROUND);
	filewrite(pffFile,"AED=%v",ME_ED);
	filewrite(pffFile,"ASUPERVISORNAME=%v",UNAME);
	filewrite(pffFile,"ASUPERVISOR_ID=%v",USERID);

	close(pffFile);

	execpff(filename(pffFile),stop);
end;


//Uploads all data
function uploadData()
	errflag = 0;		//clears  flag
	//start csweb upload
	if syncconnect(CSWeb,cswebip1,ftpun,ftppw) or syncconnect(CSWeb,cswebip2,ftpun,ftppw)then		//connect to FTP when outside of the Government WAN
		if not syncdata(PUT,LABOURFORCE_DICT,maketext("%5s",rnd_ED)) then		//Upload Labourforce data
			inc(errflag);
		endif;
		if not syncdata(PUT,LISTING_DICT,maketext("%5s",rnd_ED)) then		//Upload Control Sheet
			inc(errflag);
		endif;
		if not syncdata(PUT,ENUMERATIONREPORT_DICT,maketext("%v",ME_ED)) then	//upload enumeration report
			inc(errflag);
		endif;
		if not syncfile(PUT,maketext("../Data/Labourforce%02d%03d.cslog",ME_ROUND,ME_ED),maketext("LabourforceLogs/Labourforce%02d%03d%s.cslog",ME_ROUND,ME_ED,getdeviceid())) then		//Upload paradata logs
			inc(errflag);
		endif;
		if USERID >= 90 or USERID = 1 then
			if not syncdata(BOTH, ALLOCATION_DICT) then		//sync allocations if supervisor
				inc(errflag);
			endif;
		else
			if not syncdata(GET, ALLOCATION_DICT) then		//if enumerator get allocations only
				inc(errflag);
			endif;
		endif;
		//syncfile(PUT,"../Photos/*.jpg", "/CSPro/Photos/");
		if not syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen") then		//update questionnaire
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen") then		//update control sheet
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Menu/Menu.pff","../Menu/Menu.pff") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Allocation/Allocation.pen","../Allocation/Allocation.pen") then		//update Allocation form
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/EnumerationReport.pen","../Reports/EnumerationReport.pen") then		//update Enumeration Report
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/enumeratorrpt.html","../Reports/enumeratorrpt.html") then		//report template
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	//end csweb upload
	if errflag > 1 then
		errmsg("Data upload failed, please try again. %d errors were found",errflag);
	elseif errflag = 0 then
		errmsg("Data upload was successful");
		savesetting("Updated",maketext("%d",sysdate("YYYYMMDD")));
	elseif errflag = 1 then
		errmsg("Data upload was probably successful but there was an error, please restart the app and try again to make sure. If you keep getting this error please contact the IT dept"); 
	endif;
end;

//update app only
function updateApp()
	errflag = 0;
	//start csweb update
	if syncconnect(CSWeb,cswebip1,ftpun,ftppw) or syncconnect(CSWeb,cswebip2,ftpun,ftppw) then		//connect to FTP when outside of the Government WAN
		if not syncdata(GET, ALLOCATION_DICT) then		//get allocations
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen") then		//update questionnaire
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen") then		//update Control Sheets
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Menu/Menu.pff","../Menu/Menu.pff") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Allocation/Allocation.pen","../Allocation/Allocation.pen") then		//update Allocation form
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/EnumerationReport.pen","../Reports/EnumerationReport.pen") then		//update Enumeration Report
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/enumeratorrpt.html","../Reports/enumeratorrpt.html") then		//report template
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	//end csweb update
	if errflag > 1 then
		errmsg("App update failed, please try again. %d errors were found",errflag);
	elseif errflag = 0 then
		errmsg("App update was successful. App will now restart.");
		savesetting("Updated",maketext("%d",sysdate("YYYYMMDD")));
		execpff("Menu.pff",stop);
	elseif errflag = 1 then
		errmsg("App update was probably successful but there was an error, please restart the app and try again to make sure. If you keep getting this error please contact the IT dept"); 
	endif;
end;

//downloads Data based on ED
function downloadData(string rnd_edno)
	errflag = 0;
	//start csweb download
	errmsg("Attempting to download all data from Round :%s, ED :%s",rnd_edno[1:2],rnd_edno[3:3]);
	//errmsg("Data dictionary value Round :%V, ED :%V", RNDNO,EDNO);
	if syncconnect(CSWeb,cswebip1,ftpun,ftppw) or syncconnect(CSWeb,cswebip2,ftpun,ftppw) then		//connect to FTP when outside of the government WAN
		if not syncdata(GET,LABOURFORCE_DICT,maketext("%v%v",rnd_edno[1:2],rnd_edno[3:3])) then		//get labourforce data for round and ED
			inc(errflag);
		endif;
		if not syncdata(GET,LISTING_DICT,maketext("%5s",rnd_edno)) then			//get control sheet data for round and ED
			inc(errflag);
		endif;
		if not syncdata(get,ENUMERATIONREPORT_DICT,maketext("%v",ME_ED)) then	//get enumeration report for ED
			inc(errflag);
		endif;
		if not syncdata(GET, ALLOCATION_DICT) then		//get allocations
			inc(errflag);
		endif;
		//syncfile(GET,"CSPro/Photos/*.jpg","../Photos/");
		if not syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen") then		//update questionnaire
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen") then		//update control sheet
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Menu/Menu.pff","../Menu/Menu.pff") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Allocation/Allocation.pen","../Allocation/Allocation.pen") then		//update Allocation form
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/EnumerationReport.pen","../Reports/EnumerationReport.pen") then		//update Enumeration Report
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/enumeratorrpt.html","../Reports/enumeratorrpt.html") then		//report template
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	//end csweb download
	if errflag > 1 then
		errmsg("Download of round %s, ED %s failed, Please try again. %d errors were found",rnd_edno[1:2],rnd_edno[3:3],errflag);
	elseif errflag = 0 then
		errmsg("Download of round %s, ED %s was successful",rnd_edno[1:2],rnd_edno[3:3]);
		savesetting("Updated",maketext("%d",sysdate("YYYYMMDD")));
	elseif errflag = 1 then
		errmsg("Download of round %s, ED %s failed, Please try again",rnd_edno[1:2],rnd_edno[3:3]);
	endif;
end;

//function to upload control sheets from the computer to the server for use by the tablets
function uploadcontrolsheets()
	errflag = 0;
	//start csweb upload
	if syncconnect(CSWeb,cswebip2,ftpun,ftppw) or syncconnect(CSWeb,cswebip1,ftpun,ftppw) then		//connect to FTP when within the Government WAN
		if not syncdata(PUT,LISTING_DICT,maketext("%5s",rnd_ed)) then		//Upload Control Sheet
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	//end csweb upload
	if errflag >= 1 then
		errmsg("Data upload failed, please try again. %d errors were found",errflag);
	elseif errflag = 0 then
		errmsg("Data upload was successful");
	endif;
end;

//function to download control sheets from the server to the tablets
function downloadcontrolsheets(string rnd_edno)
	errflag = 0;
	//start csweb download
	if syncconnect(CSWeb,cswebip1,ftpun,ftppw) or syncconnect(CSWeb,cswebip2,ftpun,ftppw) then		//connect to FTP when within the Government WAN
		if not syncdata(GET,LISTING_DICT,maketext("%5s",rnd_edno)) then		//download Control Sheet
			inc(errflag);
		endif;
		if not syncdata(GET, ALLOCATION_DICT) then		//get allocations
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	//end csweb download
	if errflag >= 1 then
		errmsg("Data download failed, please try again. %d errors were found",errflag);
	elseif errflag = 0 then
		errmsg("Data download was successful");
	endif;
end;

//deletes a questionnaire
function deleteQuestionnaire()
	deleteflag = 0;
	errmsg("Are you sure you want to flag the questionnaire with ID = %V? for deletion", CHOOSE_QUESTIONNAIRE)
	select("Yes, flag for deletion",continue,"No, flag to remain",SUPERVISOR_MENU);
	
	//delcase(LABOURFORCE_DICT,CHOOSE_QUESTIONNAIRE);		//works
	
	loadcase(LABOURFORCE_DICT,CHOOSE_QUESTIONNAIRE);
	DELETE_FLAG = 1;		//mark case for deletion
	writecase(LABOURFORCE_DICT);
	deleteflag = 1;
	errmsg("Case set for deletion");
end;

//deletes a control sheet (May want to delete the associated questionnaire as well)
//TODO: DEBUG: To be completed
function deleteControlSheet()
	deleteflag = 0;
	convid = DELETE_CONTROL_SHEET[1:9]+DELETE_CONTROL_SHEET[13:15];
	errmsg("Are you sure you want to flag the Control sheet and associated questionnaire with ID = %V? for deletion", DELETE_CONTROL_SHEET)
	select("Yes, flag for deletion",continue,"No, flag to remain",LOGIN);
	
	//delcase(LISTING_DICT,CHOOSE_QUESTIONNAIRE);		//works
	
	loadcase(LISTING_DICT,DELETE_CONTROL_SHEET);
	LSTDELETE_FLAG = 1;		//mark case for deletion
	writecase(LISTING_DICT);
	deleteflag = 1;
	
	//delete associated questionnaire if any
	if loadcase(LABOURFORCE_DICT,convid) = 1 then
		DELETE_FLAG = 1;		//mark case for deletion
		writecase(LABOURFORCE_DICT);
	endif;
	errmsg("Case (and associated questionnaire) set for deletion");
end;

//BE CAREFULL WITH THIS!!! IT ACTUALLY DELETES A CONTROL SHEET WITH NO WAY TO RECOVER!!!
function adminDeleteControlSheet()
	convid = ADMIN_DELETE_CONTROL_SHEET[1:9]+ADMIN_DELETE_CONTROL_SHEET[13:15];
	errmsg("Are you sure you want to ACTUALLY DELETE the QUESTIONNAIRES for this household with ID = %V for deletion? THERE IS NO WAY TO UNDO THIS!", convid)
	select("Yes, DELETE all QUESTIONNAIRES for this household",continue,"No, flag to remain",LOGIN);
	delcase(LABOURFORCE_DICT,convid);						//deletes associated questionnaires
	errmsg("Questionnaire(s) has been deleted. Are you sure you want to ACTUALLY DELETE the LISTING ENTRY with ID = %V for deletion? THERE IS NO WAY TO UNDO THIS!", ADMIN_DELETE_CONTROL_SHEET)
	select("Yes, DELETE this LISTING ENTRY",continue,"No, flag to remain",LOGIN);
	delcase(LISTING_DICT,ADMIN_DELETE_CONTROL_SHEET);		//deletes control sheet
	errmsg("Control Sheet has been deleted");
end;

//BE CAREFULL WITH THIS!!! IT ACTUALLY DELETES A CONTROL SHEET WITH NO WAY TO RECOVER!!!
function adminDeleteQuestionnaire()
	errmsg("Are you sure you want to ACTUALLY DELETE the QUESTIONNAIRES for this household with ID = %V for deletion? THERE IS NO WAY TO UNDO THIS!", ADMIN_DELETE_QUESTIONNAIRE)
	select("Yes, DELETE all QUESTIONNAIRES for this household",continue,"No, flag to remain",LOGIN);
	delcase(LABOURFORCE_DICT,ADMIN_DELETE_QUESTIONNAIRE);						//deletes associated questionnaires
	errmsg("Questionnaire(s) has been deleted.");
end;

//Writes the login status to a file
function writeloginstatus(x)
	string loginFilename = pathname(application)+"loginflag.dat";
	setfile(loginfile,loginFilename,create);

	filewrite(loginfile,maketext("%d%02d%03d%02d%s",x,visualvalue(ME_ROUND),visualvalue(ME_ED),USERID,strip(UNAME)));	//write value of "x" to file. 1=logged in, 0=logged out
	setoperatorid(strip(UNAME));
	savesetting("UNAME",strip(UNAME));
	
	close(loginfile);
end;

//reads login status and returns 1 (logged in) or 0 (not logged in)
function readloginstatus()
	string loginfilename = pathname(application)+"loginflag.dat";	//set file path
	setfile(loginfile, loginfilename);		//set file handle
	fileread(loginfile, status);			//read file
	close(loginfile);						//close file
	
	readloginstatus = tonumber(status[1:1]);		//set function to file contents
	ME_ROUND = tonumber(status[2:2]);
	ME_ED = tonumber(status[4:3]);
	if tonumber(status[1:1]) = 1 then		//if logged in set login details
		USERID = tonumber(status[7:2]);
		UNAME = status[9];
		setoperatorid(status[9]);		//sets operator ID to username
		savesetting("UNAME",strip(UNAME));		//saves username as a setting so that other apps can access
	elseif tonumber(status[1:1]) = 0 then		//if logged out clear login details from form
		USERID = notappl;
		UNAME = "";
	endif;
end;

//fills enumeration report and opens for Viewing
function enumerationRpt()
	//trace(on);
	//set trace;
	recode ME_ED	=>	parish;		//recode ed to parish
		1-181	=>	"St. Michael";	//St. Michael
		182-295	=>	"Christ Church";	//Christ Church
		196-335	=>	"St. George";	//St. George
		336-397	=>	"St. Philip";	//St. Philip
		398-418	=>	"St. John";	//St. John
		419-479	=>	"St. James";	//St. James
		480-508	=>	"St. Thomas";	//St. Thomas
		509-521 =>	"St. Joseph";	//St. Joseph
		522-532	=>	"St. Andrew";	//St. Andrew
		533-559	=>	"St. Peter";	//St. Peter
		560-583	=>	"St. Lucy";	//St. Lucy
	endrecode;

	//initialize counters
	i = 1;
	j = 1;
	m = 1;
	n = 1;
	indivcounttot = 0;
	housecount = 0;

	//initialize array
	while m <= 50 do
		while n <= 13 do
			REPORTARRAY(m,n) = "";
			inc(n);
		enddo;
		inc(m);
	enddo;
	
	
	//count the number of househoulds completed in an ED
	//housecount = countcases(ENUMERATIONREPORT_DICT where ERED_NO = ME_ED and ERROUND = ME_ROUND);
	housecount = countcases(LABOURFORCE_DICT where EDNO = ME_ED and RNDNO = ME_ROUND and LENDDATE <> notappl);
	
	//check number of cases using new criteria, if none found then use old criteria
//if housecount <> 0 then
		//TODO: REMEMBER TO UNCOMMENT ERROUND=ME_ROUND IN ROUND 6!
		forcase ENUMERATIONREPORT_DICT where ERED_NO = ME_ED and ERROUND = ME_ROUND and datediff(WEEK_ENDING,sysdate("YYYYMMDD"),"m") <= 3 do		//for each case in enumeration report in the current ED
			REPORTARRAY(i,1) = getlabel(ERFIELD_OFFICER_VS1,ERFIELD_OFFICER);	//field officer
			REPORTARRAY(i,2) = maketext("%d",ERUNIT_NO);
			REPORTARRAY(i,3) = maketext("%d",ERSERIAL_NO);
			REPORTARRAY(i,4) = maketext("%d/%d/%d",ERWEEKYEAR,ERWEEKMONTH,ERWEEKDAY);						//week ending
			REPORTARRAY(i,5) = maketext("%d",ERHH_SIZE);
			REPORTARRAY(i,6) = maketext("%d",ERMALES);
			REPORTARRAY(i,7) = maketext("%d",ERFEMALES);
			REPORTARRAY(i,8) = ERLAST_NAME;
			REPORTARRAY(i,9) = ERFIRST_NAME;
			REPORTARRAY(i,10) = ERADDRESS;
			REPORTARRAY(i,11) = maketext("%d/%d/%d",ERSTARTY,ERSTARTM,ERSTARTD);
			REPORTARRAY(i,12) = maketext("%d/%d/%d",ERSTARTY,ERSTARTM,ERSTARTD);
			REPORTARRAY(i,13) = ERREMARKS;
			
			inc(indivcounttot,ERHH_SIZE);		//count all persons interviewed
			inc(i);
		endfor;
	{else
		housecount = countcases(ENUMERATIONREPORT_DICT where ERED_NO = ME_ED);
		forcase ENUMERATIONREPORT_DICT where ERED_NO = ME_ED do		//for each case in enumeration report in the current ED
			REPORTARRAY(i,1) = getlabel(ERFIELD_OFFICER_VS1,ERFIELD_OFFICER);	//field officer
			REPORTARRAY(i,2) = maketext("%d",ERUNIT_NO);
			REPORTARRAY(i,3) = maketext("%d",ERSERIAL_NO);
			REPORTARRAY(i,4) = maketext("%d/%d/%d",ERWEEKYEAR,ERWEEKMONTH,ERWEEKDAY);						//week ending
			REPORTARRAY(i,5) = maketext("%d",ERHH_SIZE);
			REPORTARRAY(i,6) = maketext("%d",ERMALES);
			REPORTARRAY(i,7) = maketext("%d",ERFEMALES);
			REPORTARRAY(i,8) = ERLAST_NAME;
			REPORTARRAY(i,9) = ERFIRST_NAME;
			REPORTARRAY(i,10) = ERADDRESS;
			REPORTARRAY(i,11) = maketext("%d/%d/%d",ERSTARTY,ERSTARTM,ERSTARTD);
			REPORTARRAY(i,12) = maketext("%d/%d/%d",ERSTARTY,ERSTARTM,ERSTARTD);
			REPORTARRAY(i,13) = ERREMARKS;
			inc(i);
		endfor;}
	//endif;
	
	//count the number of individuals if ERHH_SIZE has nothing
	forcase LABOURFORCE_DICT where EDNO = ME_ED and RNDNO = ME_ROUND and LENDDATE <> notappl and VACANT = 2 do
		//errmsg("num persons=%d, indiv count=%d",NUMBER_OF_PERSONS,indivcounttot);
		indivcounttot = indivcounttot + NUMBER_OF_PERSONS;		//count all persons in completed cases
	endfor;
		
	//Sort the array
	while j <= i-1 do			//while j = total items in the array
		k = j;
		while k <= i-1 do		//while k = total items in the array
			if tonumber(REPORTARRAY(j,2)) > tonumber(REPORTARRAY(k,2)) then
				l = 1;
				while l <= 10 do	//while l <= number of fields in the array
					temparray = REPORTARRAY(j,l);
					REPORTARRAY(j,l) = REPORTARRAY(k,l);
					REPORTARRAY(k,l) = temparray;
					inc(l);
				enddo;
			endif;
			inc(k);
		enddo;
		inc(j);	
	enddo;
	
	//determine if ED is completed 
	denominator = countcases(ENUMERATIONREPORT_DICT where ERED_NO = ME_ED {and ERROUND = ME_ROUND} and datediff(WEEK_ENDING,sysdate("YYYYMMDD"),"m") <= 3);
	numerator = countcases(ENUMERATIONREPORT_DICT where ERED_NO = ME_ED {and ERROUND = ME_ROUND} and ERCOMPLETED = 1 and datediff(WEEK_ENDING,sysdate("YYYYMMDD"),"m") <= 3);
	//errmsg("numerator=%d, denominator=%d, %f",numerator,denominator,numerator/denominator);
	if numerator/denominator >= 0.5 then		//if more than 50% of cases are marked as complete (Should always be either 0 or 1)
		edstatus = "COMPLETE";
	elseif numerator/denominator < 0.5 then
		edstatus = "ONGOING";
	endif;

	setreportdata("HOUSECOUNT", maketext("%d",housecount));
	setreportdata("INDIVCOUNTTOT",maketext("%d",indivcounttot));
	setreportdata("COUNTRPT",maketext("%d",i-1));
	setreportdata("PARRPT",parish);
	setreportdata("EDRPT", maketext("%d",ME_ED));
	setreportdata("EDCOMPLETE", edstatus);
	setreportdata(REPORTARRAY);
	report("../Reports/enumeratorrpt.html");
//trace(off);	
end;

//function to mark ed as complete or ongoing
function edcomplete()
	i = 0;
	do until i in 1,2
		i = accept(maketext("Mark ED %0d as complete or ongoing?",ME_ED),"Mark as COMPLETE","Mark as ONGOING");
	enddo;
	if i = 1 then
		edstatus = "COMPLETE";		//mark as complete
		forcase ENUMERATIONREPORT_DICT where ERED_NO = ME_ED {and ERROUND = ME_ROUND} and datediff(WEEK_ENDING,sysdate("YYYYMMDD"),"m") <= 3 do
			ERCOMPLETED = 1;
			writecase(ENUMERATIONREPORT_DICT);
		enddo;
	elseif i = 2 then
		edstatus = "ONGOING";		//mark as ongoing
		forcase ENUMERATIONREPORT_DICT where ERED_NO = ME_ED {and ERROUND = ME_ROUND} and datediff(WEEK_ENDING,sysdate("YYYYMMDD"),"m") <= 3 do
			ERCOMPLETED = 2;
			writecase(ENUMERATIONREPORT_DICT);
		enddo; 
	endif;
	
	errmsg("ED %0d is now %s. Please select Upload Data in the main menu to save changes",ME_ED,edstatus);
end;

//process unchanged households
function processnochange()
	//errmsg("Would you like to download the data from the previous round and insert it into this household?")
	//	select("Yes",continue,"No",SUPERVISOR_MENU);
	
	//get previous round id
	curid = MNO_CHANGE;
	tempround = tonumber(curid[1:2]) - 1;
	prevround = maketext("%2d%v",tempround,curid[3]);
	
	//download previous round
	if connection(Mobile) and not getos() in 10,30 then
		syncconnect(CSWeb, cswebip1,ftpun, ftppw);
	elseif connection(WiFi) or getos() in 10,30 then
		 if not syncconnect(CSWeb,cswebip2,ftpun,ftppw) then
		 	syncconnect(CSWeb, cswebip1, ftpun, ftppw);
		 endif;
	endif;
	syncdata(GET,LABOURFORCE_DICT,prevround);
	syncdisconnect();
	
	if locate(LABOURFORCE_DICT,=,prevround) then
		//choose if to view the questionnaire or confirm no change
		i=0;
		do until i in 1,2,3
			i = accept("case from previous round successfully downloaded.","View questionnaire","Confirm no change","Cancel");  //TODO: Would you like to view it?
		enddo;
		if i = 1 then
			CHOOSE_HOUSEHOLD = prevround;
			launchQuestionnaire();
			reenter;
		elseif i = 2 then
		//continue
		elseif i = 3 then
			move to SUPERVISOR_MENU;
		endif;
	else
		errmsg("Case from previous round was NOT found");
		reenter;
	endif;
	
	if loadcase(LABOURFORCE_DICT,curid) then		//load current case and saves needed info in an array
		curcasearray(1) = maketext("%V",VISITNO);
		curcasearray(2) = maketext("%V",ENMRTR);
		curcasearray(3) = ROTATION;
		curcasearray(4) = maketext("%V",DATE);
		curcasearray(5) = maketext("%V",SUPERV);
		curcasearray(6) = maketext("%V",LENDDATE);
		curcasearray(7) = maketext("%V",LSTARTTIME);
		curcasearray(8) = maketext("%V",LENDTIME);
		delcase(LABOURFORCE_DICT,curid);			//deletes the case
	else
		errmsg("cannot load case %v",curid);
		reenter;
	endif;
	
	if loadcase(LABOURFORCE_DICT,prevround) then		//load previous case and assign saved 
		VISITNO = tonumber(curcasearray(1));
		ENMRTR = tonumber(curcasearray(2));
		ROTATION = curcasearray(3);
		DATE = tonumber(curcasearray(4));
		SUPERV = tonumber(curcasearray(5));
		LENDDATE = tonumber(curcasearray(6));
		LSTARTTIME = tonumber(curcasearray(7));
		LENDTIME = tonumber(curcasearray(8));
		RNDNO = 5;//tonumber(curid[1:2]);
		NO_CHANGE = 2;
		caselabel = getcaselabel(LABOURFORCE_DICT);
		i = pos("-",caselabel);		//get position of first - in case label
		j = pos(":",caselabel);
		if j = 0 then
			j = 99;
		endif;
		newcaselabel = caselabel[1:i]+maketext("%02d",tonumber(curid[1:2]))+caselabel[i+3:j-11]; 
		//errmsg("newcaselabel=%V, caselabel[1:i]=%v, curid[1:2]=%v, caselabel[i+2]=%v, j=%v",newcaselabel,caselabel[1:i],maketext("%02d",tonumber(curid[1:2])),caselabel[i+3:j-11],j);
		setcaselabel(LABOURFORCE_DICT,newcaselabel);
		writecase(LABOURFORCE_DICT);
	else
		errmsg("cannot write case %v",prevround);
		reenter;
	endif;
end;

//displays the manual
function ViewManual()
	execsystem("view:"+pathname(application)+"../Manual.pdf");
end;

function OnStop()
	stop(1);
end;

PROC MENU_FF
preproc
	//trace(on);
	//trace(on,"trace.txt");
	//set trace;
	userbar(clear);
	userbar(add button, "View Manual",ViewManual());
	userbar(show);
	
postproc
	//set trace(off);

PROC MENU_QUEST
preproc

	//Initialize ftp variables
	//ftpip1 = "64.119.198.70";
	//ftpip2 = "10.129.20.110";
	{ftpun = "Census";
	ftppw = "Census2020ADM!N";
	cswebip1 = "http://64.119.198.70:8082/csweb/api";
	cswebip2 = "http://10.129.20.110:8082/csweb/api";
	}	
//--------------------------------------------------------------
PROC UNAME
preproc
	version = publishdate();		//sets version number
	
	lastupdate = int(publishdate() / 1000000);		//yearmonthdate of last version number
	
	updated = tonumber(loadsetting("Updated"));		//Last date app was updated
	//errmsg("sysdate(%d)-lastupdate(%d)=%d",sysdate("YYYYMMDD"),lastupdate,datediff(sysdate("YYYYMMDD"),lastupdate));
	//errmsg("updated(%d)-lastupdate(%d)=%d",updated,lastupdate,datediff(updated,lastupdate));
	if (datediff(sysdate("YYYYMMDD"),lastupdate) >= 1) and (datediff(updated,lastupdate) >= 1) and (getos() = 20) then		//if more than one day since last update and on android
		if connection() then		//check for internet connection
			i = 0;
			do until i in 1,2
				i = accept("Current app version is more than one day old. Check for updates?","Yes","No");
			enddo;
			if i = 1 then 
				UpdateApp();		//update the app
			elseif i = 2 then
				if readloginstatus() = 1 then
					advance to LOGIN;
				endif;
			endif;
		endif;
	endif;
	
	
	//if already logged in then just login, if not, continue logging in
	if readloginstatus() = 1 then
		advance to LOGIN;
	endif;

//--------------------------------------------------------------------
PROC USERID
//code to make sure that the valueset label matches Username
postproc
	if getlabel(USERID_VS1,$) = strip(toupper(UNAME)) then
		writeLoginStatus(1);//success
	else
		errmsg("Username and ID don't match! Please try again");
		move to UNAME;
	endif;


//---------------------------------------------------------------
PROC ME_ROUND
onfocus
	//displays saved round number
	$ = tonumber(loadsetting("ROUND"));
	allocationdate = tonumber(loadsetting("ALLOCATIONDATE"));
	
	//Load round from lookup file
	uid = maketext("%v",USERID);
	if loadcase(ALLOCATION_DICT,USERID) then
		$ = AROUND;
	endif;

postproc

	//get allocations
	uid = maketext("%v",USERID);
	if loadcase(ALLOCATION_DICT,uid) = 0 and USERID in 2:90 then		//if no allocations found	(excluding marcia best)
		if connection() then		//if on the internet
			if syncconnect(CSWeb,cswebip1,ftpun,ftppw) then		//connect to csweb when outside of the Government WAN
				syncdata(GET, ALLOCATION_DICT);		//get allocations
				allocationdate = sysdate("YYYYMMDD");
				savesetting("ALLOCATIONDATE",maketext("%d",allocationdate));		//saves so that it's persistent between sessions
			elseif syncconnect(CSWeb,cswebip2,ftpun,ftppw) then	
				syncdata(GET, ALLOCATION_DICT);		//get allocations
				allocationdate = sysdate("YYYYMMDD");
				savesetting("ALLOCATIONDATE",maketext("%d",allocationdate));		//saves so that it's persistent between sessions
			endif;
		endif;
	endif;
	
	//saves the Round number as a setting
	savesetting("ROUND",maketext("%d",$));

//--------------------------------------------------------------
PROC ME_ED
onfocus
	//displays saved ED  number
	//errmsg("onfocus");
	$ = tonumber(loadsetting("ED"));
	//errmsg("loadsetting");
	//reset arrays
	nextEntry = 1;
	while nextEntry <= 10 do
		vsEDCode(nextEntry) = notappl;
		vsLabel(nextEntry) = "";
		inc(nextEntry);
	enddo;
	//errmsg("reset arrays");
	if USERID < 90  and USERID <> 1 then		//If not a supervisor (or Marcia Best who is now a supervisor)
		//Load ED from lookup file
		nextEntry = 1;
		uid = maketext("%V",USERID);
		if loadcase(ALLOCATION_DICT,uid) then
			while nextEntry <= count(AED) do
				if AROUND = ME_ROUND then
					vsEDCode(nextEntry) = AED(nextEntry);
					vsLabel(nextEntry) = maketext("%v",AED(nextEntry));
				endif;
				inc(nextEntry);
			enddo;
		endif;
		//The following code displays a message only if starting the menu on the old tablets (which are running android 5.1.1). 
		//This code is needed to avoid the tablet crashing whenever changing an ED or opening a questionnaire
		//I HAVE NO IDEA WHY THIS WORKS!!!
		getos(osname);
		if visualvalue(LOGIN) <> 4 and pos("5.1",osname) then
			errmsg("Welcome back %V", getlabel(UNAME_VS1,UNAME));
		endif;
		//vsEDCode(nextEntry) = notappl;		//not needed since it's initialised to notappl

		setvalueset(ME_ED, vsEDCode, vsLabel);
		
		if vsEDcode(1) in notappl,0 then		//if nothing is in the valueset
			errmsg("There are no allocations available. Are you in the correct round?");
		endif;
	elseif USERID >= 90 or USERID = 1 then
		setvalueset(ME_ED,ME_ED_VS1);
	endif;
	
postproc
	rnd_ed = maketext("%v%v",ME_ROUND,ME_ED);
	//saves the ED number as a setting
	savesetting("ED",maketext("%d",$));
	setoperatorid(UNAME);
	writeloginstatus(1);		//write round and ED to login status
	
	
//--------------------------------------------------------------------
PROC LOGIN
onfocus
	$ = notappl;
	username = getlabel(UNAME_VS1,UNAME);
	
	if visualvalue(USERID) in 1,90:98 then		//Supervisor (including MArcia Best)
		setvalueset(LOGIN,LOGIN_VS1);
	elseif visualvalue(USERID) < 90 then	//enumerator
		setvalueset(LOGIN,LOGIN_VS2);
	elseif visualvalue(USERID) = 99 then	//admin
		setvalueset(LOGIN,LOGIN_VS3);
	endif;
	
postproc
	if $ = 1 then	//interviewer
		skip to INTERVIEWER_MENU;
	elseif $ = 2 then 	//supervisor
		skip to SUPERVISOR_MENU;
	elseif $ = 8 then	//admin
		skip to ADMIN_MENU;
	elseif $ = 3 then		//update only
		if connection() then
			updateApp();
		else
			errmsg("Please connect to the internet before updating the app");
		endif;
		reenter;
	elseif $ = 4 then		//change ED
		move to ME_ED;	
	elseif $ = 6 then
		move to ME_ROUND;
	elseif $ = 5 then		//upload data
		if connection() then
			uploadData();	
		else
			errmsg("Please connect to the internet before uploading data");
		endif;
		reenter;
	elseif $ = 9 then
		UNAME = "";
		USERID = notappl;
		writeloginstatus(0);
		stop(1);
	endif;
	
//---------------------------------------------------------
PROC INTERVIEWER_MENU
onfocus
	$ = notappl;
	
	//Show valueset based on OS
	if getos() in 10,30 then		//if windows
		setvalueset($,INTERVIEWER_MENU_VS2);
	elseif getos() = 20 then	//if android
		setvalueset($,INTERVIEWER_MENU_VS1);
	endif;
	
postproc
	if $ = 1 then	//Fill questionnaire
		skip to CHOOSE_HOUSEHOLD;
	elseif $ = 2 then		//fill control sheets
		LaunchControlSheet();
		reenter;
	elseif $ = 3 then		//enumeration report
		enumerationRpt();
		reenter;
	elseif $ = 4 then		//upload control sheets only
		if connection() then
			uploadcontrolsheets();
		else
			errmsg("Please connect to the internet before uploading control sheets");
		endif;
		reenter;
	elseif $ = 5 then		//download control sheets
		if connection() then
			downloadcontrolsheets(rnd_ed);		//download control sheets
		else
			errmsg("Please connect to the internet before downloading control sheets");
			reenter;
		endif;
	elseif $ = 6 then
		skip to CHOOSE_CONTROL_SHEET;
	elseif $ = 7 then		//upload data
		if connection() then
			uploadData();
		else
			errmsg("Please connect to the internet before uploading data");
		endif;
		reenter;
	elseif $ = 8 then		//delete questionnaire
		skip to DELETE_CONTROL_SHEET;
	elseif $ = 9 then		//back
		move to LOGIN;
	elseif $ = 10 then		//download New round DEBUG:THIS WAS DELETED FROM THE MENU PERSONS SHOUL USE CHANGE ROUND INSTEAD
		skip to CHOOSE_ROUND;
	endif;
reenter;		//don't leave the menu

//---------------------------------------------------------
PROC SUPERVISOR_MENU
onfocus
	$ = notappl;		//don't show the last selection
	if deleteflag = 0 then
		loadcase(LABOURFORCE_DICT,CHOOSE_QUESTIONNAIRE);
		DELETE_FLAG = 0;		//keep case
		writecase(LABOURFORCE_DICT);
	endif;
	
	//Show valueset based on OS
	if getos() in 10,30,20 then		//if windows
		setvalueset($,SUPERVISOR_MENU_VS2);
	{elseif getos() = 20 then	//if android
		setvalueset($,SUPERVISOR_MENU_VS1);
	}endif;
	
postproc
	if $ = 1 then		//download data
		if connection() then
			downloadData(rnd_ed);		//download questionnaires etc
		else
			errmsg("Please connect to the internet before downloading data");
			reenter;
		endif;
	elseif $ = 2 then		//open control sheet
		skip to CHOOSE_CONTROL_SHEET;
	elseif $ = 3 then		//open questionnaire
		skip to CHOOSE_HOUSEHOLD;
	elseif $ = 4 then		//delete questionnaire
		skip to CHOOSE_QUESTIONNAIRE;
	elseif $ = 5 then		//view Enumerator report
		enumerationRpt();
		reenter;
	elseif $ = 6 then		//allocate officers
		skip to ALLOCATE_ENUMERATOR;
	elseif $ = 7 then		//mark ED as complete
		edcomplete();
		reenter;
	elseif $ = 8 then
		skip to MNO_CHANGE;
	elseif $ = 9 then		//back
		move to LOGIN;
	endif;
reenter;		//don't leave the menu

//---------------------------------------------------------
PROC ADMIN_MENU
onfocus
	$ = notappl;		//don't show the last selection
	if deleteflag = 0 then
		loadcase(LABOURFORCE_DICT,CHOOSE_QUESTIONNAIRE);
		DELETE_FLAG = 0;		//keep case
		writecase(LABOURFORCE_DICT);
	endif;
	
postproc
	if $ = 1 then		//download data
		if connection() then
			errmsg("%S",maketext("%v%v", CHOOSE_ROUND,ME_ED));
			downloadData(rnd_ed);		//download questionnaires etc
		else
			errmsg("Please connect to the internet before downloading data");
			reenter;
		endif;
	elseif $ = 2 then		//open control sheet
		skip to CHOOSE_CONTROL_SHEET;
	elseif $ = 3 then		//open questionnaire
		skip to CHOOSE_HOUSEHOLD;
	elseif $ = 98 then		//delete questionnaire
		skip to ADMIN_DELETE_QUESTIONNAIRE;
	elseif $ = 97 then
		skip to ADMIN_DELETE_CONTROL_SHEET;
	elseif $ = 5 then		//view Enumerator report
		enumerationRpt();
		reenter;
	elseif $ = 6 then		//view summary report
		//TODO
	elseif $ = 9 then		//back
		move to LOGIN;
	endif;
reenter;		//don't leave the menu

//---------------------------------------------------------
PROC CHOOSE_QUESTIONNAIRE
//Mark questionnaire for deletion
onfocus
	nextEntry = 1;
	headindex = 0;
	forcase LISTING_DICT where LSTED = ME_ED and LSTROUND = ME_ROUND do
		idno = maketext("%V%V%V%V%V",LSTROUND,LSTED,LSTPARISH,LSTSTRATUM,LSTSAMPLE);
		loadcase(LABOURFORCE_DICT,idno);
		if VACANT = 2 then		//if not a vacant household, include name
			headindex = seek(LRTH = 0);
			vscode(nextEntry) = maketext("%V%V%V%V%V",RNDNO,EDNO,PARNO,STRATUM,HHNO);
			vslabel(nextEntry) = maketext("%S-%02d-%03d-%03d-%d-%03d (%V)",strip(LLAST_NAME(headindex)),RNDNO,EDNO,PARNO,STRATUM,HHNO, getlabel(DELETE_FLAG_VS1, DELETE_FLAG) );
			inc(nextEntry);
		else		//if a vacant household, use vacant label
			vscode(nextEntry) = maketext("%V%V%V%V%V",RNDNO,EDNO,PARNO,STRATUM,HHNO);
			vslabel(nextEntry) = maketext("Vacant-%02d-%03d-%03d-%d-%03d (%V)",RNDNO,EDNO,PARNO,STRATUM,HHNO,getlabel(DELETE_FLAG_VS1, DELETE_FLAG));
			inc(nextEntry);
		endif;
	endfor;
	
	vscode(nextEntry) = "";
	setvalueset($,vsCode,vsLabel);
	
	if vscode(1) = "" then		//if nothing is in the valueset
		errmsg("There are no questionnaires available for this ED (ED%d). Please fill out a control sheet first",ME_ED);
		if LOGIN = 1 then 
			move to INTERVIEWER_MENU;
		elseif LOGIN = 2 then
			move to SUPERVISOR_MENU;
		endif;
	endif;

postproc
	deleteQuestionnaire();
	if LOGIN = 1 then 
		move to INTERVIEWER_MENU;
	elseif LOGIN = 2 then
		move to SUPERVISOR_MENU;
	endif;

//---------------------------------------------------------
PROC CHOOSE_HOUSEHOLD
//open questionnaire
onfocus
	nextEntry = 1;
	forcase LISTING_DICT where LSTED = ME_ED and LSTROUND = ME_ROUND do
		vscode(nextEntry) = maketext("%v%v%v%v%v",LSTROUND,LSTED,LSTPARISH,LSTSTRATUM,LSTSAMPLE);
		vsLabel(nextEntry) = maketext("%03d-%03d-%03d: %V (%v)",LSTED,LSTBUILDING,LSTSAMPLE,strip(LSTLNAME),strip(LSTREMARKS));
		address(nextEntry,1) = vscode(nextEntry);
		address(nextEntry,2) = LSTADDRESS;
		address(nextEntry,3) = maketext("%V",LSTBUILDING);
		inc(nextEntry);
	endfor;
	//errmsg("Choose a household");
	vsCode(nextEntry) = "";
	
	setvalueset($, vsCode, vsLabel);
	
	if vscode(1) = "" then		//if nothing is in the valueset
		errmsg("There are no questionnaires available for this ED (ED%d). Please fill out a control sheet first",ME_ED);
		if LOGIN = 1 then 
			move to INTERVIEWER_MENU;
		elseif LOGIN = 2 then
			move to SUPERVISOR_MENU;
		endif;
	endif;
	
postproc
	CHOOSE_HOUSEHOLD = maketext("%13.12s",CHOOSE_HOUSEHOLD);		//workaround to make this shit work I shouldn't have to hack this to make it work!

	launchQuestionnaire();
	if LOGIN = 1 then 
		move to INTERVIEWER_MENU;
	elseif LOGIN = 2 then
		move to SUPERVISOR_MENU;
	endif;

//--------------------------------------------------------------------------
PROC CHOOSE_CONTROL_SHEET
//Open control sheet
onfocus
	nextEntry = 1;
	forcase LISTING_DICT where LSTED = ME_ED and LSTROUND = ME_ROUND do
		vscode(nextEntry) = maketext("%v%v%v%v%v%v",LSTROUND,LSTED,LSTPARISH,LSTSTRATUM,LSTBUILDING,LSTSAMPLE);
		vsLabel(nextEntry) = maketext("%03d-%03d-%03d: %V (%v)",LSTED,LSTBUILDING,LSTSAMPLE,strip(LSTLNAME),strip(LSTREMARKS));
		inc(nextEntry);
	endfor;
	//errmsg("Choose a household");
	vsCode(nextEntry) = "";
	
	setvalueset($, vsCode, vsLabel);
	
	if vscode(1) = "" then		//if nothing is in the valueset
		errmsg("There are no Control Sheets available for this ED (ED%d). Please fill out a control sheet first",ME_ED);
		if LOGIN = 1 then 
			move to INTERVIEWER_MENU;
		elseif LOGIN = 2 then
			move to SUPERVISOR_MENU;
		endif;
	endif;


postproc
	CHOOSE_CONTROL_SHEET = maketext("%16.15s",CHOOSE_CONTROL_SHEET);
	launchSupervisorControlSheet();
	if LOGIN = 1 then 
		move to INTERVIEWER_MENU;
	elseif LOGIN = 2 then
		move to SUPERVISOR_MENU;
	endif;

//--------------------------------------------------------------------------
PROC DELETE_CONTROL_SHEET
//mark control sheet for deletion
onfocus
	nextEntry = 1;
	forcase LISTING_DICT where LSTED = ME_ED and LSTROUND = ME_ROUND do
		vscode(nextEntry) = maketext("%v%v%v%v%v%v",LSTROUND,LSTED,LSTPARISH,LSTSTRATUM,LSTBUILDING,LSTSAMPLE);
		vsLabel(nextEntry) = maketext("%03d-%03d-%03d: %V (%v) - %s",LSTED,LSTBUILDING,LSTSAMPLE,strip(LSTLNAME),strip(LSTREMARKS),getlabel(LSTDELETE_FLAG_VS1,LSTDELETE_FLAG));
		inc(nextEntry);
	endfor;
	
	vsCode(nextEntry) = "";
	
	setvalueset($, vsCode, vsLabel);
	
	if vscode(1) = "" then		//if nothing is in the valueset
		errmsg("There are no Control Sheets available for this ED (ED%d). Please fill out a control sheet first",ME_ED);
		if LOGIN = 1 then 
			move to INTERVIEWER_MENU;
		elseif LOGIN = 2 then
			move to SUPERVISOR_MENU;
		endif;
	endif;


postproc
	DELETE_CONTROL_SHEET = maketext("%16.15s",DELETE_CONTROL_SHEET);
	deleteControlSheet();
	if LOGIN = 1 then 
		move to INTERVIEWER_MENU;
	elseif LOGIN = 2 then
		move to SUPERVISOR_MENU;
	endif;

//--------------------------------------------------------------------------
PROC ADMIN_DELETE_CONTROL_SHEET
//actually delete control sheet
onfocus
	nextEntry = 1;
	forcase LISTING_DICT where LSTED = ME_ED and LSTROUND = ME_ROUND do
		vscode(nextEntry) = maketext("%v%v%v%v%v%v",LSTROUND,LSTED,LSTPARISH,LSTSTRATUM,LSTBUILDING,LSTSAMPLE);
		vsLabel(nextEntry) = maketext("%03d-%03d-%03d: %V (%v) - %s",LSTED,LSTBUILDING,LSTSAMPLE,strip(LSTLNAME),strip(LSTREMARKS),getlabel(LSTDELETE_FLAG_VS1,LSTDELETE_FLAG));
		inc(nextEntry);
	endfor;
	
	vsCode(nextEntry) = "";
	
	setvalueset($, vsCode, vsLabel);
	
	if vscode(1) = "" then		//if nothing is in the valueset
		errmsg("There are no Control Sheets available for this ED (ED%d). Please fill out a control sheet first",ME_ED);
		if LOGIN = 1 then 
			move to INTERVIEWER_MENU;
		elseif LOGIN = 2 then
			move to SUPERVISOR_MENU;
		endif;
	endif;

postproc
	ADMIN_DELETE_CONTROL_SHEET = maketext("%16.15s",ADMIN_DELETE_CONTROL_SHEET);
	adminDeleteControlSheet();
	if LOGIN = 1 then 
		move to INTERVIEWER_MENU;
	elseif LOGIN = 2 then
		move to SUPERVISOR_MENU;
	elseif LOGIN = 8 then
		move to ADMIN_MENU;
	endif;

//--------------------------------------------------------------------------
PROC ADMIN_DELETE_QUESTIONNAIRE
//actually delete questionnaire
onfocus
	nextEntry = 1;
	headindex = 0;
	forcase LISTING_DICT where LSTED = ME_ED and LSTROUND = ME_ROUND do
		idno = maketext("%V%V%V%V%V",LSTROUND,LSTED,LSTPARISH,LSTSTRATUM,LSTSAMPLE);
		loadcase(LABOURFORCE_DICT,idno);
		if VACANT = 2 then		//if not a vacant household, include name
			headindex = seek(LRTH = 0);
			vscode(nextEntry) = maketext("%V%V%V%V%V",RNDNO,EDNO,PARNO,STRATUM,HHNO);
			vslabel(nextEntry) = maketext("%S-%02d-%03d-%03d-%d-%03d (%V)",strip(LLAST_NAME(headindex)),RNDNO,EDNO,PARNO,STRATUM,HHNO, getlabel(DELETE_FLAG_VS1, DELETE_FLAG) );
			inc(nextEntry);
		else		//if a vacant household, use vacant label
			vscode(nextEntry) = maketext("%V%V%V%V%V",RNDNO,EDNO,PARNO,STRATUM,HHNO);
			vslabel(nextEntry) = maketext("Vacant-%02d-%03d-%03d-%d-%03d (%V)",RNDNO,EDNO,PARNO,STRATUM,HHNO,getlabel(DELETE_FLAG_VS1, DELETE_FLAG));
			inc(nextEntry);
		endif;
	endfor;
	
	vscode(nextEntry) = "";
	setvalueset($,vsCode,vsLabel);
	
	if vscode(1) = "" then		//if nothing is in the valueset
		errmsg("There are no questionnaires available for this ED (ED%d). Please fill out a control sheet first",ME_ED);
		if LOGIN = 1 then 
			move to INTERVIEWER_MENU;
		elseif LOGIN = 2 then
			move to SUPERVISOR_MENU;
		endif;
	endif;

postproc
	ADMIN_DELETE_QUESTIONNAIRE = maketext("%13.12s",ADMIN_DELETE_QUESTIONNAIRE);
	adminDeleteQuestionnaire();
	if LOGIN = 1 then 
		move to INTERVIEWER_MENU;
	elseif LOGIN = 2 then
		move to SUPERVISOR_MENU;
	elseif LOGIN = 8 then
		move to ADMIN_MENU;
	endif;

//---------------------------------------------------------
PROC MNO_CHANGE
//choose unchanged questionnaires
onfocus
	nextEntry = 1;
	headindex = 0;
	forcase LISTING_DICT where LSTED = ME_ED and LSTROUND = ME_ROUND do
		idno = maketext("%V%V%V%V%V",LSTROUND,LSTED,LSTPARISH,LSTSTRATUM,LSTSAMPLE);
		loadcase(LABOURFORCE_DICT,idno);
		if NO_CHANGE = 1 then		//if not a vacant household, include name
			headindex = seek(LRTH = 0);
			vscode(nextEntry) = maketext("%V%V%V%V%V",RNDNO,EDNO,PARNO,STRATUM,HHNO);
			vslabel(nextEntry) = maketext("%S-%02d-%03d-%03d-%d-%03d",strip(LSTLNAME),RNDNO,EDNO,PARNO,STRATUM,HHNO);
			inc(nextEntry);
		endif;
	endfor;
	
	vscode(nextEntry) = "";
	setvalueset($,vsCode,vsLabel);
	
	if vscode(1) = "" then		//if nothing is in the valueset
		errmsg("There are no questionnaires available.");
		if LOGIN = 1 then 
			move to INTERVIEWER_MENU;
		elseif LOGIN = 2 then
			move to SUPERVISOR_MENU;
		endif;
	endif;

postproc
	MNO_CHANGE = maketext("%13.12s",MNO_CHANGE);
	processnochange();
	move to SUPERVISOR_MENU;
PROC ALLOCATE_ENUMERATOR
postproc
	allocateenum();
	move to SUPERVISOR_MENU;

//----------------------------------------------------
