{Application 'MENU' logic file generated by CSPro}

{
TODO: 	*Done* add enumerator reports
		*Done* Link questionnaire to control sheet
		*Done* add login
		*DONE* Need to add ENUMERATIONREPORT_DICT pen files to update functions
		*DONE* enumeration report: latest report overwrites last record
		*DONE* Add function that transfers Control Sheet to tablet through USB
			Upload control sheets option
			download control sheets option in enumerator menu
		*FIXED*: Data download  for supervisors is not working
		enable delete option for enumerators
}

PROC GLOBAL
//--------------------------------Variable Declaration------------------------------------
file 	pffFile,		//Creates a .pff file
		loginfile,		//saves login status in a file
		;

string 	rnd_ed,		//round and ED number to be downloaded
		status,		//stores current login status
		username,		//stores user name
		ftpip1,		//Stores ftp address
		ftpip2,		//stores ftp secondary address
		ftpun, 		//stores ftp username
		ftppw,		//stores ftp password
		convid,		//stores control sheet id that was converted to a questionnaire id
		;

numeric deleteflag,		//stores flag for case deletion
		errflag,		//sets error flag
		parish,			//parish
		version,		//version number
		lastupdate,		//last update version day
		updated,		//Last time the app was updated
		i,				//general counter
		;

//----------------------------------Array Declaration-------------------------------------
array string	vsCode(99);		//valueset codes
array string 	vsLabel(99);	//valueset labels
array string 	address(99,3);	//stores addresses
array string	REPORTARRAY(50,10);	//stores enumerator report data (50 = number of records, 10 = number of fields (ERFEILD_OFFICER, ERSERIAL_NO,ERUNIT_NO,WEEK_ENDING,ERLAST-NAME, ERFIRST_NAME, ERADDRESS, ERSTART, EREND,ERREMARKS))

//--------------------------------Function declaration------------------------------------
//Launches the Control sheet
function LaunchControlSheet()
	//execpff("../ControlSheets/Listing.pff", stop);
	string pffFilename = Pathname(application) + "../ControlSheets/Listing.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.1");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=CLFSS Control Sheet");

	filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"OperatorID=%s",UNAME);
	filewrite(pffFile,"StartMode=Add");
	filewrite(pffFile,"ShowInApplicationListing=Hidden");
	if getos() = 20 then				//only include the following line if on an android tablet
		filewrite(pffFile,"Lock=CaseListing");
	endif;
	filewrite(pffFile,"AutoAdd=Yes");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%s","./Listing.ent");
	filewrite(pffFile,"InputData=%s","../Data/Controlsheet.csdb|CSPRODB");
	filewrite(pffFile,"Paradata=%s","../Data/Controlsheet.cslog");
	
	filewrite(pffFile,"[UserFiles]");
	filewrite(pffFile,"PFFFILE=%s","");

	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"OnExit=../Menu/Menu.pff");
	filewrite(pffFile,"MODE=DEFAULT");
	filewrite(pffFile,"LSTENUMCODE=%s",maketext("%v",visualvalue(USERID)));
	filewrite(pffFile,"LSTED=%s",maketext("%v",ME_ED));
		
	close(pffFile);
	
	execpff(filename(pffFile), stop);
end;

//launches control sheet for supervisers
function launchSupervisorControlSheet()

	string pffFilename = Pathname(application) + "../ControlSheets/Listing.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.1");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=CLFSS Control Sheet");

	filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"OperatorID=%s",UNAME);
	filewrite(pffFile,"StartMode=Add;%s",CHOOSE_CONTROL_SHEET);
	filewrite(pffFile,"ShowInApplicationListing=Hidden");
	filewrite(pffFile,"Lock=CaseListing");
	filewrite(pffFile,"AutoAdd=No");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%s","./Listing.ent");
	filewrite(pffFile,"InputData=%s","../Data/Controlsheet.csdb|CSPRODB");
	filewrite(pffFile,"Paradata=%s","../Data/Controlsheet.cslog");
	
	filewrite(pffFile,"[UserFiles]");
	filewrite(pffFile,"PFFFILE=%s","");

	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"OnExit=../Menu/Menu.pff");
	
	filewrite(pffFile,"MODE=EDIT");
	filewrite(pffFile,"LSTROUND=%s",CHOOSE_CONTROL_SHEET[1:2]);
	filewrite(pffFile,"LSTED=%s",CHOOSE_CONTROL_SHEET[3:3]);
	filewrite(pffFile,"LSTPARISH=%s",CHOOSE_CONTROL_SHEET[6:3]);
	filewrite(pffFile,"LSTSTRATUM=%s",CHOOSE_CONTROL_SHEET[9:1]);
	filewrite(pffFile,"LSTBUILDING=%s",CHOOSE_CONTROL_SHEET[10:3]);
	filewrite(pffFile,"LSTSAMPLE=%s",CHOOSE_CONTROL_SHEET[13:3]);
	
	close(pffFile);

	execpff(filename(pffFile), stop);
end;

//searches an array and returns the position (Originally written by Gregory Martin)
function searchArray(array string arrayName(,),string findValue) 

    numeric foundPos,itr;
    
    do itr = 1 while itr <= tblrow(arrayName) and not foundPos
        
        if arrayName(itr,1) = findValue then
            foundPos = itr;
        endif;
    
    enddo;
    
    searchArray = foundPos;

end;

//Launches the Questionnaire
function LaunchQuestionnaire()

	string pffFilename = Pathname(application) + "../Questionnaire/Labourforce.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.1");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=Continuous Labourforce Sample Survey");

	filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"OperatorID=%s",UNAME);
	filewrite(pffFile,"StartMode=Add;%s",CHOOSE_HOUSEHOLD);
	filewrite(pffFile,"ShowInApplicationListing=Hidden");
	filewrite(pffFile,"AutoAdd=No");
	filewrite(pffFile,"Lock=CaseListing");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%s","./Labourforce.ent");
	filewrite(pffFile,"InputData=%s","../Data/data.csdb|CSPRODB");
	filewrite(pffFile,"Paradata=%s","../Data/Labourforce.cslog");
	
	filewrite(pffFile,"[ExternalFiles]");
	filewrite(pffFile,"LISTING_DICT=%s","../Data/Controlsheet.csdb|CSPRODB");
	filewrite(pffFile,"ENUMERATIONREPORT_DICT=%s","../Data/enumrpt.csdb|CSPRODB");
	
	filewrite(pffFile,"[UserFiles]");
	filewrite(pffFile,"PFFFILE=%s","");

	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"OnExit=../Menu/Menu.pff");
	
	filewrite(pffFile,"RNDNO=%s",CHOOSE_HOUSEHOLD[1:2]);
	filewrite(pffFile,"EDNO=%s",CHOOSE_HOUSEHOLD[3:3]);
	filewrite(pffFile,"PARNO=%s",CHOOSE_HOUSEHOLD[6:3]);
	filewrite(pffFile,"STRATUM=%s",CHOOSE_HOUSEHOLD[9:1]);		//skip Building no (CHOOSE_HOUSEHOLD[10:3]) which is not included in Labourforce ID items
	filewrite(pffFile,"HHNO=%s",CHOOSE_HOUSEHOLD[10:3]);		
	filewrite(pffFile,"ENMRTR=%s",maketext("%v",visualvalue(USERID)));
	filewrite(pffFile,"ADDRESS=%s",address(searchArray(address,CHOOSE_HOUSEHOLD),2));
	filewrite(pffFile,"BLDGNO=%s",address(searchArray(address,CHOOSE_HOUSEHOLD),3));
	
	close(pffFile);

	execpff(filename(pffFile), stop);

end;


//Uploads all data
function uploadData()
	errflag = 0;		//clears  flag
	if syncconnect(FTP,ftpip1,ftpun,ftppw) then		//connect to FTP when outside of the Government WAN
		if not syncdata(PUT,LABOURFORCE_DICT) then		//Upload Labourforce data
			inc(errflag);
		endif;
		if not syncdata(PUT,LISTING_DICT) then		//Upload Control Sheet
			inc(errflag);
		endif;
		if not syncdata(PUT,ENUMERATIONREPORT_DICT) then	//upload enumeration report
			inc(errflag);
		endif;
		if not syncfile(PUT,"../Data/Labourforce.cslog",maketext("LabourforceLogs/Labourforce%s.cslog",getdeviceid())) then		//Upload paradata logs
			inc(errflag);
		endif;
		//syncfile(PUT,"../Photos/*.jpg", "/CSPro/Photos/");
		if not syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen") then		//update questionnaire
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen") then		//update control sheet
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/EnumerationReport.pen","../Reports/EnumerationReport.pen") then		//update Enumeration Report
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/enumeratorrpt.html","../Reports/enumeratorrpt.html") then		//report template
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect

	elseif syncconnect(FTP,ftpip2,ftpun,ftppw) then		//connect to FTP when within the Government WAN
		if not syncdata(PUT,LABOURFORCE_DICT) then		//Upload Lacourforce data
			inc(errflag);
		endif;
		if not syncdata(PUT,LISTING_DICT) then		//Upload Control Sheet
			inc(errflag);
		endif;
		if not syncdata(PUT,ENUMERATIONREPORT_DICT) then	//upload enumeration report
			inc(errflag);
		endif;
		if not syncfile(PUT,"../Data/Labourforce.cslog",maketext("LabourforceLogs/Labourforce%s.cslog",getdeviceid())) then		//Upload paradata logs
			inc(errflag);
		endif;
		//syncfile(PUT,"../Photos/*.jpg", "/CSPro/Photos/");
		if not syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen") then		//update questionnaire
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen") then		//update control sheet
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/EnumerationReport.pen","../Reports/EnumerationReport.pen") then		//update Enumeration Report
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/enumeratorrpt.html","../Reports/enumeratorrpt.html") then		//report template
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	if errflag > 1 then
		errmsg("Data upload failed, please try again. %d errors were found",errflag);
	elseif errflag = 0 then
		errmsg("Data upload was successful");
		savesetting("Updated",maketext("%d",sysdate("YYYYMMDD")));
	elseif errflag = 1 then
		errmsg("Data upload was probably successful but there was an error, please restart the app and try again to make sure. If you keep getting this error please contact the IT dept"); 
	endif;
end;

//update app only
function updateApp()
	errflag = 0;
	if syncconnect(FTP,ftpip1,ftpun,ftppw) then		//connect to FTP when outside of the Government WAN
		if not syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen") then		//update questionnaire
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen") then		//update Control Sheets
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/EnumerationReport.pen","../Reports/EnumerationReport.pen") then		//update Enumeration Report
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/enumeratorrpt.html","../Reports/enumeratorrpt.html") then		//report template
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	elseif syncconnect(FTP,ftpip2,ftpun,ftppw) then		//connect to FTP when within the Government WAN
		if not syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen") then		//update questionnaire
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen") then		//update Control Sheet
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/EnumerationReport.pen","../Reports/EnumerationReport.pen") then		//update Enumeration Report
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/enumeratorrpt.html","../Reports/enumeratorrpt.html") then		//report template
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	if errflag > 1 then
		errmsg("App update failed, please try again. %d errors were found",errflag);
	elseif errflag = 0 then
		errmsg("App update was successful");
		savesetting("Updated",maketext("%d",sysdate("YYYYMMDD")));
	elseif errflag = 1 then
		errmsg("App update was probably successful but there was an error, please restart the app and try again to make sure. If you keep getting this error please contact the IT dept"); 
	endif;
end;

//downloads Data based on ED
function downloadData(string rnd_edno)
	errflag = 0;
	errmsg("Attempting to download all data from Round :%s, ED :%s",rnd_edno[1:2],rnd_edno[3:3]);
	//errmsg("Data dictionary value Round :%V, ED :%V", RNDNO,EDNO);
	if syncconnect(FTP,ftpip1,ftpun,ftppw) then		//connect to FTP when outside of the government WAN
		if not syncdata(GET,LABOURFORCE_DICT,rnd_edno) then		//get labourforce data for round and ED
			inc(errflag);
		endif;
		if not syncdata(GET,LISTING_DICT,rnd_edno) then			//get control sheet data for round and ED
			inc(errflag);
		endif;
		if not syncdata(get,ENUMERATIONREPORT_DICT,maketext("%v",ME_ED)) then	//get enumeration report for ED
			inc(errflag);
		endif;
		//syncfile(GET,"CSPro/Photos/*.jpg","../Photos/");
		if not syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen") then		//update questionnaire
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen") then		//update control sheet
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/EnumerationReport.pen","../Reports/EnumerationReport.pen") then		//update Enumeration Report
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/enumeratorrpt.html","../Reports/enumeratorrpt.html") then		//report template
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	elseif syncconnect(FTP,ftpip2,ftpun,ftppw) then		//connect to FTP when outside of the government WAN
		if not syncdata(GET,LABOURFORCE_DICT,rnd_edno) then		//get labourforce data for round and ED
			inc(errflag);
		endif;
		if not syncdata(GET,LISTING_DICT,rnd_edno) then			//get control sheet data for round and ED
			inc(errflag);
		endif;
		if not syncdata(get,ENUMERATIONREPORT_DICT,maketext("%v",ME_ED)) then	//get enumeration report for ED
			inc(errflag);
		endif;
		//syncfile(GET,"CSPro/Photos/*.jpg","../Photos/");
		if not syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen") then		//update questionnaire
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen") then		//update control sheet
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/EnumerationReport.pen","../Reports/EnumerationReport.pen") then		//update Enumeration Report
			inc(errflag);
		endif;
		if not syncfile(GET,"/CSPro/Update/Reports/enumeratorrpt.html","../Reports/enumeratorrpt.html") then		//report template
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	if errflag > 1 then
		errmsg("Download of round %s, ED %s failed, Please try again. %d errors were found",rnd_edno[1:2],rnd_edno[3:3],errflag);
	elseif errflag = 0 then
		errmsg("Download of round %s, ED %s was successful",rnd_edno[1:2],rnd_edno[3:3]);
		savesetting("Updated",maketext("%d",sysdate("YYYYMMDD")));
	elseif errflag = 1 then
		errmsg("Download of round %s, ED %s failed, Please try again",rnd_edno[1:2],rnd_edno[3:3]);
	endif;
end;

//function to upload control sheets from the computer to the server for use by the tablets
function uploadcontrolsheets()
	if syncconnect(FTP,ftpip2,ftpun,ftppw) then		//connect to FTP when within the Government WAN
		if not syncdata(PUT,LISTING_DICT) then		//Upload Control Sheet
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	elseif syncconnect(FTP,ftpip1,ftpun,ftppw) then		//connect to FTP when within the Government WAN
		if not syncdata(PUT,LISTING_DICT) then		//Upload Control Sheet
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	if errflag >= 1 then
		errmsg("Data upload failed, please try again. %d errors were found",errflag);
	elseif errflag = 0 then
		errmsg("Data upload was successful");
	endif;
end;

//function to download control sheets from the server to the tablets
function downloadcontrolsheets(string rnd_edno)
	if syncconnect(FTP,ftpip1,ftpun,ftppw) then		//connect to FTP when within the Government WAN
		if not syncdata(GET,LISTING_DICT,rnd_edno) then		//download Control Sheet
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	elseif syncconnect(FTP,ftpip2,ftpun,ftppw) then		//connect to FTP when within the Government WAN
		if not syncdata(GET,LISTING_DICT) then		//Upload Control Sheet
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	if errflag >= 1 then
		errmsg("Data download failed, please try again. %d errors were found",errflag);
	elseif errflag = 0 then
		errmsg("Data download was successful");
	endif;
end;

//deletes a questionnaire
function deleteQuestionnaire()
	deleteflag = 0;
	errmsg("Are you sure you want to flag the questionnaire with ID = %V? for deletion", CHOOSE_QUESTIONNAIRE)
	select("Yes, flag for deletion",continue,"No, flag to remain",SUPERVISOR_MENU);
	
	//delcase(LABOURFORCE_DICT,CHOOSE_QUESTIONNAIRE);		//works
	
	loadcase(LABOURFORCE_DICT,CHOOSE_QUESTIONNAIRE);
	DELETE_FLAG = 1;		//mark case for deletion
	writecase(LABOURFORCE_DICT);
	deleteflag = 1;
	errmsg("Case set for deletion");
end;

//deletes a control sheet (May want to delete the associated questionnaire as well)
//TODO: DEBUG: To be completed
function deleteControlSheet()
	deleteflag = 0;
	convid = DELETE_CONTROL_SHEET[1:9]+DELETE_CONTROL_SHEET[13:15];
	errmsg("Are you sure you want to flag the questionnaire with ID = %V? for deletion", DELETE_CONTROL_SHEET)
	select("Yes, flag for deletion",continue,"No, flag to remain",SUPERVISOR_MENU);
	
	//delcase(LISTING_DICT,CHOOSE_QUESTIONNAIRE);		//works
	
	loadcase(LISTING_DICT,DELETE_CONTROL_SHEET);
	LSTDELETE_FLAG = 1;		//mark case for deletion
	writecase(LISTING_DICT);
	deleteflag = 1;
	
	//delete associated questionnaire if any
	if loadcase(LABOURFORCE_DICT,convid) = 1 then
		DELETE_FLAG = 1;		//mark case for deletion
		writecase(LABOURFORCE_DICT);
	endif;
	errmsg("Case (and associated questionnaire) set for deletion");
end;

//Writes the login status to a file
function writeloginstatus(x)
	string loginFilename = pathname(application)+"loginflag.dat";
	setfile(loginfile,loginFilename,create);

	filewrite(loginfile,"%d%03d%02d%s",x,visualvalue(ME_ED),USERID,strip(UNAME));	//write value of "x" to file. 1=logged in, 0=logged out
	setoperatorid(strip(UNAME));
	savesetting("UNAME",strip(UNAME));
	
	close(loginfile);
end;

//reads login status and returns 1 (logged in) or 0 (not logged in)
function readloginstatus()
	string loginfilename = pathname(application)+"loginflag.dat";	//set file path
	setfile(loginfile, loginfilename);		//set file handle
	fileread(loginfile, status);			//read file
	close(loginfile);						//close file
	
	readloginstatus = tonumber(status[1:1]);		//set function to file contents
	ME_ED = tonumber(status[2:3]);
	if tonumber(status[1:1]) = 1 then		//if logged in set login details
		USERID = tonumber(status[5:2]);
		UNAME = status[7];
		setoperatorid(status[7]);		//sets operator ID to username
		savesetting("UNAME",strip(UNAME));		//saves username as a setting so that other apps can access
	elseif tonumber(status[1:1]) = 0 then		//if logged out clear login details from form
		USERID = notappl;
		UNAME = "";
	endif;
end;

//fills enumeration report and opens for Viewing
function enumerationRpt()
	recode ME_ED	=>	parish;		//recode ed to parish
		1-181	=>	201;	//St. Michael
		182-295	=>	202;	//Christ Church
		196-335	=>	203;	//St. George
		336-397	=>	204;	//St. Philip
		398-418	=>	205;	//St. John
		419-479	=>	206;	//St. James
		480-508	=>	207;	//St. Thomas
		509-521 =>	208;	//St. Joseph
		522-532	=>	209;	//St. Andrew
		533-559	=>	210;	//St. Peter
		560-583	=>	211;	//St. Lucy
	endrecode;
	i = 1;
	forcase ENUMERATIONREPORT_DICT where ERED_NO = ME_ED do		//for each case in enumeration report in the current ED
		REPORTARRAY(i,1) = getlabel(ERFIELD_OFFICER_VS1,ERFIELD_OFFICER);	//field officer
		REPORTARRAY(i,2) = maketext("%d",ERUNIT_NO);
		REPORTARRAY(i,3) = maketext("%d",ERSERIAL_NO);
		REPORTARRAY(i,4) = maketext("%d/%d/%d",ERWEEKYEAR,ERWEEKMONTH,ERWEEKDAY);						//week ending
		REPORTARRAY(i,5) = ERLAST_NAME;
		REPORTARRAY(i,6) = ERFIRST_NAME;
		REPORTARRAY(i,7) = ERADDRESS;
		REPORTARRAY(i,8) = maketext("%d/%d/%d",ERSTARTY,ERSTARTM,ERSTARTD);
		REPORTARRAY(i,9) = maketext("%d/%d/%d",ERSTARTY,ERSTARTM,ERSTARTD);
		REPORTARRAY(i,10) = ERREMARKS;
		inc(i);
	endfor;

	setreportdata("PARRPT",maketext("%d",parish));
	setreportdata("EDRPT", maketext("%d",ME_ED));
	setreportdata(REPORTARRAY);
	report("../Reports/enumeratorrpt.html");
	
end;

//displays the manual
function ViewManual()
	execsystem("view:"+pathname(application)+"../Manual.pdf");
end;

function OnStop()
	stop(1);
end;

PROC MENU_FF
preproc
	//trace(on);
	//trace(on,"trace.txt");
	//set trace;
	userbar(clear);
	userbar(add button, "View Manual",ViewManual());
	userbar(show);
	
postproc
	//set trace(off);

PROC MENU_QUEST
preproc

	//Initialize ftp variables
	ftpip1 = "64.119.198.70";
	ftpip2 = "10.129.20.110";
	ftpun = "Census";
	ftppw = "Census2020ADM!N";
	
//--------------------------------------------------------------
PROC UNAME
preproc
	version = publishdate();		//sets version number
	
	lastupdate = int(publishdate() / 1000000);		//yearmonthdate of last version number
	
	updated = tonumber(loadsetting("Updated"));		//Last date app was updated
	//errmsg("sysdate(%d)-lastupdate(%d)=%d",sysdate("YYYYMMDD"),lastupdate,datediff(sysdate("YYYYMMDD"),lastupdate));
	//errmsg("updated(%d)-lastupdate(%d)=%d",updated,lastupdate,datediff(updated,lastupdate));
	if (datediff(sysdate("YYYYMMDD"),lastupdate) >= 1) and (datediff(updated,lastupdate) >= 1) and (getos() = 20) then		//if more than one day since last update and on android
		if connection() then		//check for internet connection
			i = 0;
			do until i in 1,2
				i = accept("Current app version is more than one day old. Check for updates?","Yes","No");
			enddo;
			if i = 1 then 
				UpdateApp();		//update the app
			elseif i = 2 then
				if readloginstatus() = 1 then
					advance to LOGIN;
				endif;
			endif;
		endif;
	endif;
	
	//if already logged in then just login, if not, continue logging in
	if readloginstatus() = 1 then
		advance to LOGIN;
	endif;

//--------------------------------------------------------------------
PROC USERID
//code to make sure that the valueset label matches Username
postproc
	if getlabel(USERID_VS1,$) = strip(UNAME) then
		writeLoginStatus(1);//success
	else
		errmsg("Username and ID don't match! Please try again");
		move to UNAME;
	endif;


//---------------------------------------------------------------
PROC ME_ED
onfocus
	//displays saved ED  number

	$ = tonumber(loadsetting("ED")); 
	
postproc
	//saves the ED number as a setting
	savesetting("ED",maketext("%d",$));
	setoperatorid(UNAME);
	
	
//--------------------------------------------------------------------
PROC LOGIN
onfocus
	$ = notappl;
	username = getlabel(UNAME_VS1,UNAME);
	
	if visualvalue(USERID) >= 90 then		//Supervisor
		setvalueset(LOGIN,LOGIN_VS1);
	elseif visualvalue(USERID) < 90 then	//enumerator
		setvalueset(LOGIN,LOGIN_VS2);
	endif;
	
postproc
	if $ = 1 then	//interviewer
		skip to INTERVIEWER_MENU;
	elseif $ = 2 then 	//supervisor
		skip to SUPERVISOR_MENU;
	elseif $ = 3 then		//update only
		if connection() then
			updateApp();
		else
			errmsg("Please connect to the internet before updating the app");
		endif;
		reenter;
	elseif $ = 4 then		//change ED
		move to ME_ED;	
	elseif $ = 5 then		//upload data
		if connection() then
			uploadData();	
		else
			errmsg("Please connect to the internet before uploading data");
		endif;
		reenter;
	elseif $ = 9 then
		UNAME = "";
		USERID = notappl;
		writeloginstatus(0);
		stop(1);
	endif;
	
//---------------------------------------------------------
PROC INTERVIEWER_MENU
onfocus
	$ = notappl;
	
	//Show valueset based on OS
	if getos() in 10,30 then		//if windows
		setvalueset($,INTERVIEWER_MENU_VS2);
	elseif getos() = 20 then	//if android
		setvalueset($,INTERVIEWER_MENU_VS1);
	endif;
	
postproc
	if $ = 1 then	//Fill questionnaire
		skip to CHOOSE_HOUSEHOLD;
	elseif $ = 2 then		//fill control sheets
		LaunchControlSheet();
		reenter;
	elseif $ = 3 then		//enumeration report
		enumerationRpt();
		reenter;
	elseif $ = 4 then		//upload control sheets only
		if connection() then
			uploadcontrolsheets();
		else
			errmsg("Please connect to the internet before uploading control sheets");
		endif;
		reenter;
	elseif $ = 5 then		//download control sheets
		if connection() then
			skip to CHOOSE_ROUND;
		else
			errmsg("Please connect to the internet before downloading control sheets");
			reenter;
		endif;
	elseif $ = 6 then
		skip to CHOOSE_CONTROL_SHEET;
	elseif $ = 7 then		//upload data
		if connection() then
			uploadData();	
		else
			errmsg("Please connect to the internet before uploading data");
		endif;
		reenter;
	elseif $ = 8 then		//delete questionnaire
		skip to DELETE_CONTROL_SHEET;
	elseif $ = 9 then		//back
		move to LOGIN;
	endif;
reenter;		//don't leave the menu

//---------------------------------------------------------
PROC SUPERVISOR_MENU
onfocus
	$ = notappl;		//don't show the last selection
	if deleteflag = 0 then
		loadcase(LABOURFORCE_DICT,CHOOSE_QUESTIONNAIRE);
		DELETE_FLAG = 0;		//keep case
		writecase(LABOURFORCE_DICT);
	endif;
	
postproc
	if $ = 1 then		//download data
		if connection() then
			skip to CHOOSE_ROUND;
		else
			errmsg("Please connect to the internet before downloading data");
			reenter;
		endif;
	elseif $ = 2 then		//open control sheet
		skip to CHOOSE_CONTROL_SHEET;
	elseif $ = 3 then		//open questionnaire
		skip to CHOOSE_HOUSEHOLD;
	elseif $ = 4 then		//delete questionnaire
		skip to CHOOSE_QUESTIONNAIRE;
	elseif $ = 5 then		//view Enumerator report
		enumerationRpt();
		reenter;
	elseif $ = 6 then		//view summary report
		//TODO
	elseif $ = 9 then		//back
		move to LOGIN;
	endif;
reenter;		//don't leave the menu

//---------------------------------------------------------
PROC CHOOSE_ROUND
Postproc
	if SUPERVISOR_MENU = 1 then		//if downloading questionnaires as Supervisor
		rnd_ed = maketext("%v%v", CHOOSE_ROUND,ME_ED);
		//errmsg("%S",maketext("%v%v", CHOOSE_ROUND,ME_ED));
		downloadData(rnd_ed);		//download questionnaires etc
		move to SUPERVISOR_MENU;
	elseif INTERVIEWER_MENU = 5 then		//if downloading control sheets as enumerator
		rnd_ed = maketext("%v%v", CHOOSE_ROUND,ME_ED);
		downloadcontrolsheets(rnd_ed);		//download control sheets
		move to INTERVIEWER_MENU;
	endif;

//---------------------------------------------------------
PROC CHOOSE_ED
{TODO: DELETE THIS VARIABLE
//DEBUG: Doesn't work, text formatting doesn't match data dictionary somehow
Postproc
	rnd_ed = maketext("%2d%3d", CHOOSE_ROUND,ME_ED);
	downloadData(rnd_ed);
	
	move to LOGIN;

//---------------------------------------------------------
}
PROC CHOOSE_QUESTIONNAIRE
onfocus
	numeric nextEntry = 1;
	numeric headindex;
	forcase LABOURFORCE_DICT do
		loadcase(LABOURFORCE_DICT,RNDNO,EDNO,PARNO,STRATUM,HHNO);
		if VACANT = 2 then		//if not a vacant household, include name
			headindex = seek(LRTH = 0);
			vscode(nextEntry) = maketext("%V%V%V%V%V",RNDNO,EDNO,PARNO,STRATUM,HHNO);
			vslabel(nextEntry) = maketext("%S-%02d-%03d-%03d-%d-%03d (%V)",strip(LLAST_NAME(headindex)),RNDNO,EDNO,PARNO,STRATUM,HHNO, getlabel(DELETE_FLAG_VS1, DELETE_FLAG) );
			inc(nextEntry);
		else		//if a vacant household, use vacant label
			vscode(nextEntry) = maketext("%V%V%V%V%V",RNDNO,EDNO,PARNO,STRATUM,HHNO);
			vslabel(nextEntry) = maketext("Vacant-%02d-%03d-%03d-%d-%03d (%V)",RNDNO,EDNO,PARNO,STRATUM,HHNO,getlabel(DELETE_FLAG_VS1, DELETE_FLAG));
			inc(nextEntry);
		endif;
	endfor;
	
	vscode(nextEntry) = "";
	setvalueset($,vsCode,vsLabel);
	
	if vscode(1) = "" then		//if nothing is in the valueset
		errmsg("There are no questionnaires available for this ED (ED%d). Please fill out a control sheet first",ME_ED);
		if LOGIN = 1 then 
			move to INTERVIEWER_MENU;
		elseif LOGIN = 2 then
			move to SUPERVISOR_MENU;
		endif;
	endif;

postproc
	deleteQuestionnaire();
	if LOGIN = 1 then 
		move to INTERVIEWER_MENU;
	elseif LOGIN = 2 then
		move to SUPERVISOR_MENU;
	endif;

//---------------------------------------------------------
PROC CHOOSE_HOUSEHOLD
onfocus
	numeric nextEntry = 1;
	forcase LISTING_DICT where LSTED = ME_ED do
		vscode(nextEntry) = maketext("%v%v%v%v%v",LSTROUND,LSTED,LSTPARISH,LSTSTRATUM,LSTSAMPLE);
		vsLabel(nextEntry) = maketext("%03d-%03d-%03d: %V (%v)",LSTED,LSTBUILDING,LSTSAMPLE,strip(LSTLNAME),strip(LSTREMARKS));
		address(nextEntry,1) = vscode(nextEntry);
		address(nextEntry,2) = LSTADDRESS;
		address(nextEntry,3) = maketext("%V",LSTBUILDING);
		inc(nextEntry);
	endfor;
	
	vsCode(nextEntry) = "";
	
	setvalueset($, vsCode, vsLabel);
	
	if vscode(1) = "" then		//if nothing is in the valueset
		errmsg("There are no questionnaires available for this ED (ED%d). Please fill out a control sheet first",ME_ED);
		if LOGIN = 1 then 
			move to INTERVIEWER_MENU;
		elseif LOGIN = 2 then
			move to SUPERVISOR_MENU;
		endif;
	endif;

postproc
	launchQuestionnaire();
	if LOGIN = 1 then 
		move to INTERVIEWER_MENU;
	elseif LOGIN = 2 then
		move to SUPERVISOR_MENU;
	endif;

//--------------------------------------------------------------------------
PROC CHOOSE_CONTROL_SHEET
onfocus
	numeric nextEntry = 1;
	forcase LISTING_DICT where LSTED = ME_ED do
		vscode(nextEntry) = maketext("%v%v%v%v%v%v",LSTROUND,LSTED,LSTPARISH,LSTSTRATUM,LSTBUILDING,LSTSAMPLE);
		vsLabel(nextEntry) = maketext("%03d-%03d-%03d: %V (%v)",LSTED,LSTBUILDING,LSTSAMPLE,strip(LSTLNAME),strip(LSTREMARKS));
		inc(nextEntry);
	endfor;
	
	vsCode(nextEntry) = "";
	
	setvalueset($, vsCode, vsLabel);
	
	if vscode(1) = "" then		//if nothing is in the valueset
		errmsg("There are no Control Sheets available for this ED (ED%d). Please fill out a control sheet first",ME_ED);
		if LOGIN = 1 then 
			move to INTERVIEWER_MENU;
		elseif LOGIN = 2 then
			move to SUPERVISOR_MENU;
		endif;
	endif;


postproc
	launchSupervisorControlSheet();
	if LOGIN = 1 then 
		move to INTERVIEWER_MENU;
	elseif LOGIN = 2 then
		move to SUPERVISOR_MENU;
	endif;

//--------------------------------------------------------------------------
PROC DELETE_CONTROL_SHEET
onfocus
	numeric nextEntry = 1;
	forcase LISTING_DICT where LSTED = ME_ED do
		vscode(nextEntry) = maketext("%v%v%v%v%v%v",LSTROUND,LSTED,LSTPARISH,LSTSTRATUM,LSTBUILDING,LSTSAMPLE);
		vsLabel(nextEntry) = maketext("%03d-%03d-%03d: %V (%v)",LSTED,LSTBUILDING,LSTSAMPLE,strip(LSTLNAME),strip(LSTREMARKS));
		inc(nextEntry);
	endfor;
	
	vsCode(nextEntry) = "";
	
	setvalueset($, vsCode, vsLabel);
	
	if vscode(1) = "" then		//if nothing is in the valueset
		errmsg("There are no Control Sheets available for this ED (ED%d). Please fill out a control sheet first",ME_ED);
		if LOGIN = 1 then 
			move to INTERVIEWER_MENU;
		elseif LOGIN = 2 then
			move to SUPERVISOR_MENU;
		endif;
	endif;


postproc
	deleteControlSheet();
	if LOGIN = 1 then 
		move to INTERVIEWER_MENU;
	elseif LOGIN = 2 then
		move to SUPERVISOR_MENU;
	endif;

//--------------------------------------------------------------------------
