{Application 'MENU' logic file generated by CSPro}

{
TODO: 	add enumerator reports
		Link questionnaire to control sheet
		add login
}

PROC GLOBAL
//--------------------------------Variable Declaration------------------------------------
file 	pffFile,		//Creates a .pff file
		loginfile;		//saves login status in a file

string 	rnd_ed,		//round and ED number to be downloaded
		status;		//stores current login status

numeric deleteflag;		//stores flag for case deletion

//----------------------------------Array Declaration-------------------------------------
array string	vsCode(99);		//valueset codes
array string 	vsLabel(99);	//valueset labels

//--------------------------------Function declaration------------------------------------
//Launches the questionnaire
function LaunchControlSheet()
	//execpff("../ControlSheets/Listing.pff", stop);
	string pffFilename = Pathname(application) + "../ControlSheets/Listing.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.1");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=CLFSS Control Sheet");

	filewrite(pffFile,"[DataEntryInit]");
	
	filewrite(pffFile,"StartMode=Add");
	filewrite(pffFile,"ShowInApplicationListing=Hidden");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%s","./Listing.ent");
	filewrite(pffFile,"InputData=%s","../Data/Controlsheet.csdb|CSPRODB");
	filewrite(pffFile,"Paradata=%s","./Controlsheet.cslog");
	
	filewrite(pffFile,"[UserFiles]");
	filewrite(pffFile,"PFFFILE=%s","");

	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"Parameter=%s","onexit = ..\Menu\Menu.pff");
	filewrite(pffFile,"MODE=DEFAULT");
	
	
	close(pffFile);
	
	execpff(filename(pffFile), stop);
end;

//launches control sheet for supervisers
function launchSupervisorControlSheet()

	string pffFilename = Pathname(application) + "../ControlSheets/Listing.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.1");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=CLFSS Control Sheet");

	filewrite(pffFile,"[DataEntryInit]");
	
	filewrite(pffFile,"StartMode=Add;%s",CHOOSE_CONTROL_SHEET);
	filewrite(pffFile,"ShowInApplicationListing=Hidden");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%s","./Listing.ent");
	filewrite(pffFile,"InputData=%s","../Data/Controlsheet.csdb|CSPRODB");
	filewrite(pffFile,"Paradata=%s","./Controlsheet.cslog");
	
	filewrite(pffFile,"[UserFiles]");
	filewrite(pffFile,"PFFFILE=%s","");

	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"Parameter=%s","onexit = ..\Menu\Menu.pff");
	
	filewrite(pffFile,"MODE=EDIT");
	filewrite(pffFile,"LSTROUND=%s",CHOOSE_CONTROL_SHEET[1:2]);
	filewrite(pffFile,"LSTED=%s",CHOOSE_CONTROL_SHEET[3:3]);
	filewrite(pffFile,"LSTPARISH=%s",CHOOSE_CONTROL_SHEET[6:3]);
	filewrite(pffFile,"LSTSTRATUM=%s",CHOOSE_CONTROL_SHEET[9:1]);
	filewrite(pffFile,"LSTBUILDING=%s",CHOOSE_CONTROL_SHEET[10:3]);
	filewrite(pffFile,"LSTSAMPLE=%s",CHOOSE_CONTROL_SHEET[13:3]);
	
	close(pffFile);

	execpff(filename(pffFile), stop);
end;

//Launches the control sheet
function LaunchQuestionnaire()

	string pffFilename = Pathname(application) + "../Questionnaire/Labourforce.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.1");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=Continuous Labourforce Sample Survey");

	filewrite(pffFile,"[DataEntryInit]");
	
	filewrite(pffFile,"StartMode=Add;%s",CHOOSE_HOUSEHOLD);
	filewrite(pffFile,"ShowInApplicationListing=Hidden");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%s","./Labourforce.ent");
	filewrite(pffFile,"InputData=%s","../Data/data.csdb|CSPRODB");
	filewrite(pffFile,"Paradata=%s","./Labourforce.cslog");
	
	filewrite(pffFile,"[ExternalFiles]");
	filewrite(pffFile,"LISTING_DICT=%s","../Controlsheet.csdb|CSPRODB");
	
	filewrite(pffFile,"[UserFiles]");
	filewrite(pffFile,"PFFFILE=%s","");

	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"Parameter=%s","onexit = ..\Menu\Menu.pff");
	
	filewrite(pffFile,"RNDNO=%s",CHOOSE_HOUSEHOLD[1:2]);
	filewrite(pffFile,"EDNO=%s",CHOOSE_HOUSEHOLD[3:3]);
	filewrite(pffFile,"PARNO=%s",CHOOSE_HOUSEHOLD[6:3]);
	filewrite(pffFile,"STRATUM=%s",CHOOSE_HOUSEHOLD[9:1]);
	filewrite(pffFile,"HHNO=%s",CHOOSE_HOUSEHOLD[13:3]);
	
	close(pffFile);

	execpff(filename(pffFile), stop);

end;

//Uploads all data
function uploadData()
	if syncconnect(FTP,"64.119.198.70","Census","Census2020ADM!N") then		//connect to FTP when outside of the Government WAN
		syncdata(PUT,LABOURFORCE_DICT);		//Upload Lacourforce data
		syncdata(PUT,LISTING_DICT);		//Upload Control Sheet
		syncfile(PUT,"../Questionnaire/Labourforce.cslog",maketext("LabourforceLogs/Labourforce%s.cslog",getdeviceid()));		//Upload paradata logs
		//syncfile(PUT,"../Photos/*.jpg", "/CSPro/Photos/");
		syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen");		//update questionnaire
		syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen");		//update control sheet
		syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen");		//update Menu
		syncdisconnect();		//disconnect
		errmsg("Data upload was successful");
	elseif syncconnect(FTP,"10.129.20.110","Census","Census2020ADM!N") then		//connect to FTP when within the Government WAN
		syncdata(PUT,LABOURFORCE_DICT);		//Upload Lacourforce data
		syncdata(PUT,LISTING_DICT);		//Upload control sheet
		syncfile(PUT,"../Questionnaire/Labourforce.cslog",maketext("LabourforceLogs/Labourforce%s.cslog",getdeviceid()));		//Upload paradata logs
		//syncfile(PUT,"../Photos/*.jpg", "/CSPro/Photos/");
		syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen");		//update questionnaire
		syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen");		//update Lising
		syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen");		//update Menu
		syncdisconnect();		//disconnect
		errmsg("Data upload was successful");
	else
		errmsg("Data upload failed, Please try again");
	endif;
end;

//update app only
function updateApp()
	if syncconnect(FTP,"64.119.198.70","Census","Census2020ADM!N") then		//connect to FTP when outside of the Government WAN
		syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen");		//update questionnaire
		syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen");		//update Control Sheets
		syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen");		//update Menu
		syncdisconnect();		//disconnect
		errmsg("App update successful");
	elseif syncconnect(FTP,"10.129.20.110","Census","Census2020ADM!N") then		//connect to FTP when within the Government WAN
		syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen");		//update questionnaire
		syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen");		//update Control Sheet
		syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen");		//update Menu
		syncdisconnect();		//disconnect
		errmsg("App update successful, Exit app to complete");
	else
		errmsg("App update failed, Please try again");
	endif;
end;

//downloads Data based on ED
function downloadData(string rnd_edno)
	errmsg("Attempting to download all data from Round :%s, ED :%s",rnd_edno[1:2],rnd_edno[3:3]);
	errmsg("Data dictionary value Round :%V, ED :%V", RNDNO,EDNO);
	if syncconnect(FTP,"64.119.198.70","Census","Census2020ADM!N") then		//connect to FTP when outside of the government WAN
		syncdata(GET,LABOURFORCE_DICT,rnd_edno);		//get labourforce data for round and ED
	syncdata(GET,LISTING_DICT,rnd_edno);			//get control sheet data for round and ED
		//syncfile(GET,"CSPro/Photos/*.jpg","../Photos/");
		syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen");		//update questionnaire
		syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen");		//update control sheet
		syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen");		//update Menu
		syncdisconnect();		//disconnect
		errmsg("Download of round %s, ED %s was successful",rnd_edno[1:2],rnd_edno[3:3]);
	elseif syncconnect(FTP,"10.129.20.110","Census","Census2020ADM!N") then		//connect to FTP when outside of the government WAN
		syncdata(GET,LABOURFORCE_DICT,rnd_edno);		//get labourforce data for round and ED
		syncdata(GET,LISTING_DICT,rnd_edno);			//get control sheet data for round and ED
		//syncfile(GET,"CSPro/Photos/*.jpg","../Photos/");
		syncfile(GET,"/CSPro/Update/Questionnaire/Labourforce.pen","../Questionnaire/Labourforce.pen");		//update questionnaire
		syncfile(GET,"/CSPro/Update/ControlSheets/Listing.pen","../ControlSheets/Listing.pen");		//update control sheet
		syncfile(GET,"/CSPro/Update/Menu/Menu.pen","../Menu/Menu.pen");		//update Menu
		syncdisconnect();		//disconnect
		errmsg("Download of round %s, ED %s was successful",rnd_edno[1:2],rnd_edno[3:3]);
	else
		errmsg("Download of round %s, ED %s failed, Please try again",rnd_edno[1:2],rnd_edno[3:3]);
	endif;
end;

//deletes a questionnaire
function deleteQuestionnaire()
	deleteflag = 0;
	errmsg("Are you sure you want to flag the questionnaire with ID = %V? for deletion", CHOOSE_QUESTIONNAIRE)
	select("Yes, flag for deletion",continue,"No, flag to remain",SUPERVISOR_MENU);
	
	//delcase(LABOURFORCE_DICT,CHOOSE_QUESTIONNAIRE);		//works
	
	loadcase(LABOURFORCE_DICT,CHOOSE_QUESTIONNAIRE);
	DELETE_FLAG = 1;		//mark case for deletion
	writecase(LABOURFORCE_DICT);
	deleteflag = 1;
	errmsg("Case set for deletion");
end;

//Writes the login status to a file
function writeloginstatus(x);
	string loginFilename = pathname(application)+"loginflag.dat";
	setfile(loginfile,loginFilename,create);

	filewrite(loginfile,"%d%03d%04d%s",x,visualvalue(ME_ED),USERID,strip(UNAME));	//write value of "x" to file. 1=logged in, 0=logged out
	
	close(loginfile);
end;

//reads login status and returns 1 (logged in) or 0 (not logged in)
function readloginstatus();
	string loginfilename = pathname(application)+"loginflag.dat";	//set file path
	setfile(loginfile, loginfilename);		//set file handle
	fileread(loginfile, status);			//read file
	close(loginfile);						//close file
	
	readloginstatus = tonumber(status[1:1]);		//set function to file contents
	ME_ED = tonumber(status[2:3]);
	USERID = tonumber(status[5:4]);
	UNAME = status[9];
end;

PROC MENU_FF

PROC UNAME
preproc
	//if already logged in then just login, if not, continue logging in
	if readloginstatus() = 1 then
		skip to ME_ED;
	endif;

//--------------------------------------------------------------------
PROC USERID
//code to make sure that the valueset label matches Username
postproc
	if getlabel(USERID_VS1,$) = strip(UNAME) then
		writeLoginStatus(1);//success
	else
		errmsg("Username and ID don't match! Please try again");
		move to UNAME;
	endif;


//---------------------------------------------------------------
PROC LOGIN
onfocus
	if visualvalue(USERID) >= 90 then		//Supervisor
		setvalueset(LOGIN,LOGIN_VS1);
	elseif visualvalue(USERID) < 90 then	//enumerator
		setvalueset(LOGIN,LOGIN_VS2);
	endif;
	
postproc
	if $ = 1 then	//interviewer
		skip to INTERVIEWER_MENU;
	elseif $ = 2 then 	//supervisor
		skip to SUPERVISOR_MENU;
	elseif $ = 3 then		//update only
		updateApp();
		reenter;		
	elseif $ = 9 then
		writeloginstatus(0);
		UNAME = "";
		USERID = notappl;
		stop(1);
	endif;
	
//---------------------------------------------------------
PROC INTERVIEWER_MENU
onfocus
	$ = notappl;
	
postproc
	if $ = 1 then	//Fill questionnaire
		skip to CHOOSE_HOUSEHOLD;
	elseif $ = 2 then
		LaunchControlSheet();
	elseif $ = 3 then
		//TODO: enumeration report Auto fill with all data
	elseif $ = 4 then
		//TODO: summary report
	elseif $ = 7 then		//upload data
		uploadData();
	elseif $ = 9 then		//logout
		move to LOGIN;
	endif;
reenter;		//don't leave the menu

//---------------------------------------------------------
PROC SUPERVISOR_MENU
onfocus
	$ = notappl;		//don't show the last selection
	if deleteflag = 0 then
		loadcase(LABOURFORCE_DICT,CHOOSE_QUESTIONNAIRE);
		DELETE_FLAG = 0;		//keep case
		writecase(LABOURFORCE_DICT);
	endif;
	
postproc
	if $ = 1 then		//download data
		skip to CHOOSE_ROUND;
	elseif $ = 2 then		//open control sheet
		skip to CHOOSE_CONTROL_SHEET;
	elseif $ = 3 then		//open questionnaire
		skip to CHOOSE_HOUSEHOLD;
	elseif $ = 4 then		//delete questionnaire
		skip to CHOOSE_QUESTIONNAIRE;
	elseif $ = 5 then		//view Enumerator report
		//TODO
	elseif $ = 6 then		//view summary report
		//TODO
	elseif $ = 9 then		//logout
		move to LOGIN;
	endif;
reenter;		//don't leave the menu

//---------------------------------------------------------
PROC CHOOSE_ROUND
Postproc
	rnd_ed = maketext("%v%v", CHOOSE_ROUND,ME_ED);
	downloadData(rnd_ed);
	
	move to LOGIN;

//---------------------------------------------------------
PROC CHOOSE_ED
{TODO: DELETE THIS VARIABLE
//DEBUG: Doesn't work, text formatting doesn't match data dictionary somehow
Postproc
	rnd_ed = maketext("%2d%3d", CHOOSE_ROUND,ME_ED);
	downloadData(rnd_ed);
	
	move to LOGIN;

//---------------------------------------------------------
}
PROC CHOOSE_QUESTIONNAIRE
onfocus
	numeric nextEntry = 1;
	numeric headindex;
	forcase LABOURFORCE_DICT do
		loadcase(LABOURFORCE_DICT,RNDNO,EDNO,PARNO,STRATUM,HHNO);
		if VACANT = 2 then		//if not a vacant household, include name
			headindex = seek(LRTH = 0);
			vscode(nextEntry) = maketext("%V%V%V%V%V",RNDNO,EDNO,PARNO,STRATUM,HHNO);
			vslabel(nextEntry) = maketext("%S-%02d-%03d-%03d-%d-%03d (%V)",strip(LLAST_NAME(headindex)),RNDNO,EDNO,PARNO,STRATUM,HHNO, getlabel(DELETE_FLAG_VS1, DELETE_FLAG) );
			inc(nextEntry);
		else		//if a vacant household, use vacant label
			vscode(nextEntry) = maketext("%V%V%V%V%V",RNDNO,EDNO,PARNO,STRATUM,HHNO);
			vslabel(nextEntry) = maketext("Vacant-%02d-%03d-%03d-%d-%03d (%V)",RNDNO,EDNO,PARNO,STRATUM,HHNO,getlabel(DELETE_FLAG_VS1, DELETE_FLAG));
			inc(nextEntry);
		endif;
	endfor;
	
	vscode(nextEntry) = "";
	setvalueset($,vsCode,vsLabel);

postproc
	deleteQuestionnaire();

	move to SUPERVISOR_MENU;

//---------------------------------------------------------
PROC CHOOSE_HOUSEHOLD
onfocus
	numeric nextEntry = 1;
	forcase LISTING_DICT where LSTED = ME_ED do
		vscode(nextEntry) = maketext("%v%v%v%v%v%v",LSTROUND,LSTED,LSTPARISH,LSTSTRATUM,LSTBUILDING,LSTSAMPLE);
		vsLabel(nextEntry) = maketext("%03d-%03d-%03d: %V (%v)",LSTED,LSTBUILDING,LSTSAMPLE,strip(LSTLNAME),strip(LSTREMARKS));
		inc(nextEntry);
	endfor;
	
	vsCode(nextEntry) = "";
	
	setvalueset($, vsCode, vsLabel);

postproc
	launchQuestionnaire();
	move to INTERVIEWER_MENU;

//--------------------------------------------------------------------------
PROC CHOOSE_CONTROL_SHEET
onfocus
	numeric nextEntry = 1;
	forcase LISTING_DICT where LSTED = ME_ED do
		vscode(nextEntry) = maketext("%v%v%v%v%v%v",LSTROUND,LSTED,LSTPARISH,LSTSTRATUM,LSTBUILDING,LSTSAMPLE);
		vsLabel(nextEntry) = maketext("%03d-%03d-%03d: %V (%v)",LSTED,LSTBUILDING,LSTSAMPLE,strip(LSTLNAME),strip(LSTREMARKS));
		inc(nextEntry);
	endfor;
	
	vsCode(nextEntry) = "";
	
	setvalueset($, vsCode, vsLabel);

postproc
	launchSupervisorControlSheet();
	move to INTERVIEWER_MENU;

//--------------------------------------------------------------------------
